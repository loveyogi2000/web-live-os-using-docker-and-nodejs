{"version":3,"file":"xterm-addon-image.js","mappings":"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","sources":["webpack://ImageAddon/webpack/universalModuleDefinition","webpack://ImageAddon/./node_modules/sixel/lib/Colors.js","webpack://ImageAddon/./src/ImageRenderer.ts","webpack://ImageAddon/./src/ImageStorage.ts","webpack://ImageAddon/./src/SixelHandler.ts","webpack://ImageAddon/./src/WorkerManager.ts","webpack://ImageAddon/webpack/bootstrap","webpack://ImageAddon/./src/ImageAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ImageAddon\"] = factory();\n\telse\n\t\troot[\"ImageAddon\"] = factory();\n})(self, function() {\nreturn ","\"use strict\";\n/**\n * Copyright (c) 2019 Joerg Breitbart.\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_FOREGROUND = exports.DEFAULT_BACKGROUND = exports.PALETTE_ANSI_256 = exports.PALETTE_VT340_GREY = exports.PALETTE_VT340_COLOR = exports.normalizeHLS = exports.normalizeRGB = exports.nearestColorIndex = exports.fromRGBA8888 = exports.toRGBA8888 = exports.alpha = exports.blue = exports.green = exports.red = exports.BIG_ENDIAN = void 0;\n// FIXME: cleanup this mess, move things either to decoder/encoder, keep only shared things\n// system endianess\nexports.BIG_ENDIAN = new Uint8Array(new Uint32Array([0xFF000000]).buffer)[0] === 0xFF;\nif (exports.BIG_ENDIAN) {\n    console.warn('BE platform detected. This version of node-sixel works only on LE properly.');\n}\n// channel values\nfunction red(n) {\n    return n & 0xFF;\n}\nexports.red = red;\nfunction green(n) {\n    return (n >>> 8) & 0xFF;\n}\nexports.green = green;\nfunction blue(n) {\n    return (n >>> 16) & 0xFF;\n}\nexports.blue = blue;\nfunction alpha(n) {\n    return (n >>> 24) & 0xFF;\n}\nexports.alpha = alpha;\n/**\n * Convert RGB channels to native color RGBA8888.\n */\nfunction toRGBA8888(r, g, b, a = 255) {\n    return ((a & 0xFF) << 24 | (b & 0xFF) << 16 | (g & 0xFF) << 8 | (r & 0xFF)) >>> 0; // ABGR32\n}\nexports.toRGBA8888 = toRGBA8888;\n/**\n * Convert native color to [r, g, b, a].\n */\nfunction fromRGBA8888(color) {\n    return [color & 0xFF, (color >> 8) & 0xFF, (color >> 16) & 0xFF, color >>> 24];\n}\nexports.fromRGBA8888 = fromRGBA8888;\n/**\n * Get index of nearest color in `palette` for `color`.\n * Uses euclidean distance without any luminescence correction.\n */\nfunction nearestColorIndex(color, palette) {\n    const r = red(color);\n    const g = green(color);\n    const b = blue(color);\n    let min = Number.MAX_SAFE_INTEGER;\n    let idx = -1;\n    // use euclidean distance (manhattan gives very poor results)\n    for (let i = 0; i < palette.length; ++i) {\n        const dr = r - palette[i][0];\n        const dg = g - palette[i][1];\n        const db = b - palette[i][2];\n        const d = dr * dr + dg * dg + db * db;\n        if (!d)\n            return i;\n        if (d < min) {\n            min = d;\n            idx = i;\n        }\n    }\n    return idx;\n}\nexports.nearestColorIndex = nearestColorIndex;\n// color conversions\n// HLS taken from: http://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl\nfunction clamp(low, high, value) {\n    return Math.max(low, Math.min(value, high));\n}\nfunction h2c(t1, t2, c) {\n    if (c < 0)\n        c += 1;\n    if (c > 1)\n        c -= 1;\n    return c * 6 < 1\n        ? t2 + (t1 - t2) * 6 * c\n        : c * 2 < 1\n            ? t1\n            : c * 3 < 2\n                ? t2 + (t1 - t2) * (4 - c * 6)\n                : t2;\n}\nfunction HLStoRGB(h, l, s) {\n    if (!s) {\n        const v = Math.round(l * 255);\n        return toRGBA8888(v, v, v);\n    }\n    const t1 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const t2 = 2 * l - t1;\n    return toRGBA8888(clamp(0, 255, Math.round(h2c(t1, t2, h + 1 / 3) * 255)), clamp(0, 255, Math.round(h2c(t1, t2, h) * 255)), clamp(0, 255, Math.round(h2c(t1, t2, h - 1 / 3) * 255)));\n}\n/**\n * Normalize SIXEL RGB values (percent based, 0-100) to RGBA8888.\n */\nfunction normalizeRGB(r, g, b) {\n    return (0xFF000000 | Math.round(b / 100 * 255) << 16 | Math.round(g / 100 * 255) << 8 | Math.round(r / 100 * 255)) >>> 0; // ABGR32\n}\nexports.normalizeRGB = normalizeRGB;\n/**\n * Normalize SIXEL HLS values to RGBA8888. Applies hue correction of +240°.\n */\nfunction normalizeHLS(h, l, s) {\n    // Note: hue value is turned by 240° in VT340, all values given as fractions\n    return HLStoRGB((h + 240 % 360) / 360, l / 100, s / 100);\n}\nexports.normalizeHLS = normalizeHLS;\n/**\n * default palettes\n */\n// FIXME: move palettes to Decoder.ts\n/**\n * 16 predefined color registers of VT340 (values in %):\n * ```\n *                R   G   B\n * 0  Black       0   0   0\n * 1  Blue        20  20  80\n * 2  Red         80  13  13\n * 3  Green       20  80  20\n * 4  Magenta     80  20  80\n * 5  Cyan        20  80  80\n * 6  Yellow      80  80  20\n * 7  Gray 50%    53  53  53\n * 8  Gray 25%    26  26  26\n * 9  Blue*       33  33  60\n * 10 Red*        60  26  26\n * 11 Green*      33  60  33\n * 12 Magenta*    60  33  60\n * 13 Cyan*       33  60  60\n * 14 Yellow*     60  60  33\n * 15 Gray 75%    80  80  80\n * ```\n * (*) less saturated\n *\n * @see https://vt100.net/docs/vt3xx-gp/chapter2.html#S2.4\n*/\nexports.PALETTE_VT340_COLOR = new Uint32Array([\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(20, 20, 80),\n    normalizeRGB(80, 13, 13),\n    normalizeRGB(20, 80, 20),\n    normalizeRGB(80, 20, 80),\n    normalizeRGB(20, 80, 80),\n    normalizeRGB(80, 80, 20),\n    normalizeRGB(53, 53, 53),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(33, 33, 60),\n    normalizeRGB(60, 26, 26),\n    normalizeRGB(33, 60, 33),\n    normalizeRGB(60, 33, 60),\n    normalizeRGB(33, 60, 60),\n    normalizeRGB(60, 60, 33),\n    normalizeRGB(80, 80, 80)\n]);\n/**\n * 16 predefined monochrome registers of VT340 (values in %):\n * ```\n *              R   G   B\n * 0  Black     0   0   0\n * 1  Gray-2    13  13  13\n * 2  Gray-4    26  26  26\n * 3  Gray-6    40  40  40\n * 4  Gray-1    6   6   6\n * 5  Gray-3    20  20  20\n * 6  Gray-5    33  33  33\n * 7  White 7   46  46  46\n * 8  Black 0   0   0   0\n * 9  Gray-2    13  13  13\n * 10 Gray-4    26  26  26\n * 11 Gray-6    40  40  40\n * 12 Gray-1    6   6   6\n * 13 Gray-3    20  20  20\n * 14 Gray-5    33  33  33\n * 15 White 7   46  46  46\n * ```\n *\n * @see https://vt100.net/docs/vt3xx-gp/chapter2.html#S2.4\n */\nexports.PALETTE_VT340_GREY = new Uint32Array([\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(13, 13, 13),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(40, 40, 40),\n    normalizeRGB(6, 6, 6),\n    normalizeRGB(20, 20, 20),\n    normalizeRGB(33, 33, 33),\n    normalizeRGB(46, 46, 46),\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(13, 13, 13),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(40, 40, 40),\n    normalizeRGB(6, 6, 6),\n    normalizeRGB(20, 20, 20),\n    normalizeRGB(33, 33, 33),\n    normalizeRGB(46, 46, 46)\n]);\n/**\n * 256 predefined ANSI colors.\n *\n * @see https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n */\nexports.PALETTE_ANSI_256 = (() => {\n    // 16 lower colors (taken from xterm)\n    const p = [\n        toRGBA8888(0, 0, 0),\n        toRGBA8888(205, 0, 0),\n        toRGBA8888(0, 205, 0),\n        toRGBA8888(205, 205, 0),\n        toRGBA8888(0, 0, 238),\n        toRGBA8888(205, 0, 205),\n        toRGBA8888(0, 250, 205),\n        toRGBA8888(229, 229, 229),\n        toRGBA8888(127, 127, 127),\n        toRGBA8888(255, 0, 0),\n        toRGBA8888(0, 255, 0),\n        toRGBA8888(255, 255, 0),\n        toRGBA8888(92, 92, 255),\n        toRGBA8888(255, 0, 255),\n        toRGBA8888(0, 255, 255),\n        toRGBA8888(255, 255, 255),\n    ];\n    // colors up to 232\n    const d = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; ++r) {\n        for (let g = 0; g < 6; ++g) {\n            for (let b = 0; b < 6; ++b) {\n                p.push(toRGBA8888(d[r], d[g], d[b]));\n            }\n        }\n    }\n    // grey scale to up 255\n    for (let v = 8; v <= 238; v += 10) {\n        p.push(toRGBA8888(v, v, v));\n    }\n    return new Uint32Array(p);\n})();\n/**\n * Background: Black by default.\n * Foreground: White by default.\n *\n * Background color is used whenever a fill color is needed and not explicitly set.\n * Foreground color is used as default initial sixel color.\n */\nexports.DEFAULT_BACKGROUND = toRGBA8888(0, 0, 0, 255);\nexports.DEFAULT_FOREGROUND = toRGBA8888(255, 255, 255, 255);\n//# sourceMappingURL=Colors.js.map","/**\n * Copyright (c) 2020 Joerg Breitbart.\n * @license MIT\n */\n\nimport { toRGBA8888 } from 'sixel/lib/Colors';\nimport { IDisposable } from 'xterm';\nimport { ICellSize, ITerminalExt, IImageSpec, IRenderDimensions, IRenderService } from './Types';\n\n\nconst PLACEHOLDER_LENGTH = 4096;\nconst PLACEHOLDER_HEIGHT = 24;\n\n/**\n * ImageRenderer - terminal frontend extension:\n * - provide primitives for canvas, ImageData, Bitmap (static)\n * - add canvas layer to DOM (browser only for now)\n * - draw image tiles onRender\n */\nexport class ImageRenderer implements IDisposable {\n  public canvas: HTMLCanvasElement | undefined;\n  private _ctx: CanvasRenderingContext2D | null | undefined;\n  private _placeholder: HTMLCanvasElement | undefined;\n  private _placeholderBitmap: ImageBitmap | undefined;\n  private _optionsRefresh: IDisposable | undefined;\n  private _oldOpen: ((parent: HTMLElement) => void) | undefined;\n  private _renderService: IRenderService | undefined;\n  private _oldSetRenderer: ((renderer: any) => void) | undefined;\n\n  // drawing primitive - canvas\n  public static createCanvas(base: Window, width: number, height: number): HTMLCanvasElement {\n    const canvas = base.document.createElement('canvas');\n    canvas.width = width | 0;\n    canvas.height = height | 0;\n    return canvas;\n  }\n\n  // drawing primitive - ImageData with optional buffer\n  public static createImageData(ctx: CanvasRenderingContext2D, width: number, height: number, buffer?: ArrayBuffer): ImageData {\n    if (typeof ImageData !== 'function') {\n      const imgData = ctx.createImageData(width, height);\n      if (buffer) {\n        imgData.data.set(new Uint8ClampedArray(buffer, 0, width * height * 4));\n      }\n      return imgData;\n    }\n    return buffer\n      ? new ImageData(new Uint8ClampedArray(buffer, 0, width * height * 4), width, height)\n      : new ImageData(width, height);\n  }\n\n  // drawing primitive - ImageBitmap\n  public static createImageBitmap(img: ImageBitmapSource): Promise<ImageBitmap | undefined> {\n    if (typeof createImageBitmap !== 'function') {\n      return Promise.resolve(undefined);\n    }\n    return createImageBitmap(img);\n  }\n\n\n  constructor(private _terminal: ITerminalExt, private _showPlaceholder: boolean) {\n    this._oldOpen = this._terminal._core.open;\n    this._terminal._core.open = (parent: HTMLElement): void => {\n      this._oldOpen?.call(this._terminal._core, parent);\n      this._open();\n    };\n    if (this._terminal._core.screenElement) {\n      this._open();\n    }\n    // hack to spot fontSize changes\n    this._optionsRefresh = this._terminal._core.optionsService.onOptionChange(option => {\n      if (option === 'fontSize') {\n        this.rescaleCanvas();\n        this._renderService?.refreshRows(0, this._terminal.rows);\n      }\n    });\n  }\n\n\n  public dispose(): void {\n    this._optionsRefresh?.dispose();\n    this._removeLayerFromDom();\n    if (this._terminal._core && this._oldOpen) {\n      this._terminal._core.open = this._oldOpen;\n      this._oldOpen = undefined;\n    }\n    if (this._renderService && this._oldSetRenderer) {\n      this._renderService.setRenderer = this._oldSetRenderer;\n      this._oldSetRenderer = undefined;\n    }\n    this._renderService = undefined;\n    this.canvas = undefined;\n    this._ctx = undefined;\n    this._placeholderBitmap?.close();\n    this._placeholderBitmap = undefined;\n    this._placeholder = undefined;\n  }\n\n  /**\n   * Enable the placeholder.\n   */\n  public showPlaceholder(value: boolean): void {\n    if (value) {\n      if (!this._placeholder && this.cellSize.height !== -1) {\n        this._createPlaceHolder(Math.max(this.cellSize.height + 1, PLACEHOLDER_HEIGHT));\n      }\n    } else {\n      this._placeholderBitmap?.close();\n      this._placeholderBitmap = undefined;\n      this._placeholder = undefined;\n    }\n    this._renderService?.refreshRows(0, this._terminal.rows);\n  }\n\n  /**\n   * Dimensions of the terminal.\n   * Forwarded from internal render service.\n   */\n  public get dimensions(): IRenderDimensions | undefined {\n    return this._renderService?.dimensions;\n  }\n\n  /**\n   * Current cell size (float).\n   */\n  public get cellSize(): ICellSize {\n    return {\n      width: this.dimensions?.actualCellWidth || -1,\n      height: this.dimensions?.actualCellHeight || -1\n    };\n  }\n\n  /**\n   * Clear a region of the image layer canvas.\n   */\n  public clearLines(start: number, end: number): void {\n    this._ctx?.clearRect(\n      0,\n      start * (this.dimensions?.actualCellHeight || 0),\n      this.dimensions?.canvasWidth || 0,\n      (++end - start) * (this.dimensions?.actualCellHeight || 0)\n    );\n  }\n\n  /**\n   * Clear whole image canvas.\n   */\n  public clearAll(): void {\n    this._ctx?.clearRect(0, 0, this.canvas?.width || 0, this.canvas?.height || 0);\n  }\n\n  /**\n   * Draw neighboring tiles on the image layer canvas.\n   */\n  public draw(imgSpec: IImageSpec, tileId: number, col: number, row: number, count: number = 1): void {\n    if (!this._ctx) {\n      return;\n    }\n    const { width, height } = this.cellSize;\n\n    // Don't try to draw anything, if we cannot get valid renderer metrics.\n    if (width === -1 || height === -1) {\n      return;\n    }\n\n    this._rescaleImage(imgSpec, width, height);\n    const img = imgSpec.actual!;\n    const cols = Math.ceil(img.width / width);\n\n    const sx = (tileId % cols) * width;\n    const sy = Math.floor(tileId / cols) * height;\n    const dx = col * width;\n    const dy = row * height;\n\n    // safari bug: never access image source out of bounds\n    const finalWidth = count * width + sx > img.width ? img.width - sx : count * width;\n    const finalHeight = sy + height > img.height ? img.height - sy : height;\n\n    // Floor all pixel offsets to get stable tile mapping without any overflows.\n    // Note: For not pixel perfect aligned cells like in the DOM renderer\n    // this will move a tile slightly to the top/left (subpixel range, thus ignore it).\n    // FIX #34: avoid striping on displays with pixelDeviceRatio != 1 by ceiling height and width\n    this._ctx.drawImage(\n      img,\n      Math.floor(sx), Math.floor(sy), Math.ceil(finalWidth), Math.ceil(finalHeight),\n      Math.floor(dx), Math.floor(dy), Math.ceil(finalWidth), Math.ceil(finalHeight)\n    );\n  }\n\n  /**\n   * Extract a single tile from an image.\n   */\n  public extractTile(imgSpec: IImageSpec, tileId: number): HTMLCanvasElement | undefined {\n    const { width, height } = this.cellSize;\n    // Don't try to draw anything, if we cannot get valid renderer metrics.\n    if (width === -1 || height === -1) {\n      return;\n    }\n    this._rescaleImage(imgSpec, width, height);\n    const img = imgSpec.actual!;\n    const cols = Math.ceil(img.width / width);\n    const sx = (tileId % cols) * width;\n    const sy = Math.floor(tileId / cols) * height;\n    const finalWidth = width + sx > img.width ? img.width - sx : width;\n    const finalHeight = sy + height > img.height ? img.height - sy : height;\n\n    const canvas = ImageRenderer.createCanvas(this._terminal._core._coreBrowserService.window, finalWidth, finalHeight);\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.drawImage(\n        img,\n        Math.floor(sx), Math.floor(sy), Math.floor(finalWidth), Math.floor(finalHeight),\n        0, 0, Math.floor(finalWidth), Math.floor(finalHeight)\n      );\n      return canvas;\n    }\n  }\n\n  /**\n   * Draw a line with placeholder on the image layer canvas.\n   */\n  public drawPlaceholder(col: number, row: number, count: number = 1): void {\n    if ((this._placeholderBitmap || this._placeholder) && this._ctx) {\n      const { width, height } = this.cellSize;\n\n      // Don't try to draw anything, if we cannot get valid renderer metrics.\n      if (width === -1 || height === -1) {\n        return;\n      }\n\n      if (height >= this._placeholder!.height) {\n        this._createPlaceHolder(height + 1);\n      }\n      this._ctx.drawImage(\n        this._placeholderBitmap || this._placeholder!,\n        col * width,\n        (row * height) % 2 ? 0 : 1,  // needs %2 offset correction\n        width * count,\n        height,\n        col * width,\n        row * height,\n        width * count,\n        height\n      );\n    }\n  }\n\n  /**\n   * Rescale image layer canvas if needed.\n   * Checked once from `ImageStorage.render`.\n   */\n  public rescaleCanvas(): void {\n    if (!this.canvas) {\n      return;\n    }\n    if (this.canvas.width !== this.dimensions?.canvasWidth || this.canvas.height !== this.dimensions.canvasHeight) {\n      this.canvas.width = this.dimensions?.canvasWidth || 0;\n      this.canvas.height = this.dimensions?.canvasHeight || 0;\n    }\n  }\n\n  /**\n   * Rescale image in storage if needed.\n   */\n  private _rescaleImage(spec: IImageSpec, currentWidth: number, currentHeight: number): void {\n    if (currentWidth === spec.actualCellSize.width && currentHeight === spec.actualCellSize.height) {\n      return;\n    }\n    const { width: originalWidth, height: originalHeight } = spec.origCellSize;\n    if (currentWidth === originalWidth && currentHeight === originalHeight) {\n      spec.actual = spec.orig;\n      spec.actualCellSize.width = originalWidth;\n      spec.actualCellSize.height = originalHeight;\n      return;\n    }\n    const canvas = ImageRenderer.createCanvas(\n      this._terminal._core._coreBrowserService.window,\n      Math.ceil(spec.orig!.width * currentWidth / originalWidth),\n      Math.ceil(spec.orig!.height * currentHeight / originalHeight)\n    );\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.drawImage(spec.orig!, 0, 0, canvas.width, canvas.height);\n      spec.actual = canvas;\n      spec.actualCellSize.width = currentWidth;\n      spec.actualCellSize.height = currentHeight;\n    }\n  }\n\n  /**\n   * Lazy init for the renderer.\n   */\n  private _open(): void {\n    this._renderService = this._terminal._core._renderService;\n    this._oldSetRenderer = this._renderService.setRenderer.bind(this._renderService);\n    this._renderService.setRenderer = (renderer: any) => {\n      this._removeLayerFromDom();\n      this._oldSetRenderer?.call(this._renderService, renderer);\n      this._insertLayerToDom();\n    };\n    this._insertLayerToDom();\n    if (this._showPlaceholder) {\n      this._createPlaceHolder();\n    }\n  }\n\n  private _insertLayerToDom(): void {\n    this.canvas = ImageRenderer.createCanvas(this._terminal._core._coreBrowserService.window, this.dimensions?.canvasWidth || 0, this.dimensions?.canvasHeight || 0);\n    this.canvas.classList.add('xterm-image-layer');\n    this._terminal._core.screenElement?.appendChild(this.canvas);\n    this._ctx = this.canvas.getContext('2d', { alpha: true, desynchronized: true });\n  }\n\n  private _removeLayerFromDom(): void {\n    this.canvas?.parentNode?.removeChild(this.canvas);\n  }\n\n  private _createPlaceHolder(height: number = PLACEHOLDER_HEIGHT): void {\n    this._placeholderBitmap?.close();\n    this._placeholderBitmap = undefined;\n\n    // create blueprint to fill placeholder with\n    const bWidth = 32;  // must be 2^n\n    const blueprint = ImageRenderer.createCanvas(this._terminal._core._coreBrowserService.window, bWidth, height);\n    const ctx = blueprint.getContext('2d', { alpha: false });\n    if (!ctx) return;\n    const imgData = ImageRenderer.createImageData(ctx, bWidth, height);\n    const d32 = new Uint32Array(imgData.data.buffer);\n    const black = toRGBA8888(0, 0, 0);\n    const white = toRGBA8888(255, 255, 255);\n    d32.fill(black);\n    for (let y = 0; y < height; ++y) {\n      const shift = y % 2;\n      const offset = y * bWidth;\n      for (let x = 0; x < bWidth; x += 2) {\n        d32[offset + x + shift] = white;\n      }\n    }\n    ctx.putImageData(imgData, 0, 0);\n\n    // create placeholder line, width aligned to blueprint width\n    const width = (screen.width + bWidth - 1) & ~(bWidth - 1) || PLACEHOLDER_LENGTH;\n    this._placeholder = ImageRenderer.createCanvas(this._terminal._core._coreBrowserService.window, width, height);\n    const ctx2 = this._placeholder.getContext('2d', { alpha: false });\n    if (!ctx2) {\n      this._placeholder = undefined;\n      return;\n    }\n    for (let i = 0; i < width; i += bWidth) {\n      ctx2.drawImage(blueprint, i, 0);\n    }\n    ImageRenderer.createImageBitmap(this._placeholder).then(bitmap => this._placeholderBitmap = bitmap);\n  }\n}\n","/**\n * Copyright (c) 2020 Joerg Breitbart.\n * @license MIT\n */\nimport { IDisposable } from 'xterm';\nimport { ImageRenderer } from './ImageRenderer';\nimport { ITerminalExt, IExtendedAttrsImage, IImageAddonOptions, IImageSpec, IBufferLineExt, BgFlags, Cell, Content, ICellSize, ExtFlags, Attributes, UnderlineStyle } from './Types';\n\n\n// fallback default cell size\nexport const CELL_SIZE_DEFAULT: ICellSize = {\n  width: 7,\n  height: 14\n};\n\n/**\n * Extend extended attribute to also hold image tile information.\n *\n * Object definition is copied from base repo to fully mimick its behavior.\n * Image data is added as additional public properties `imageId` and `tileId`.\n */\nclass ExtendedAttrsImage implements IExtendedAttrsImage {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0,\n    public imageId = -1,\n    public tileId = -1\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrsImage {\n    /**\n     * Technically we dont need a clone variant of ExtendedAttrsImage,\n     * as we never clone a cell holding image data.\n     * Note: Clone is only meant to be used by the InputHandler for\n     * sticky attributes, which is never the case for image data.\n     * We still provide a proper clone method to reflect the full ext attr\n     * state in case there are future use cases for clone.\n     */\n    return new ExtendedAttrsImage(this._ext, this._urlId, this.imageId, this.tileId);\n  }\n\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0 && this.imageId === -1;\n  }\n}\nconst EMPTY_ATTRS = new ExtendedAttrsImage();\n\n\n/**\n * ImageStorage - extension of CoreTerminal:\n * - hold image data\n * - write/read image data to/from buffer\n *\n * TODO: image composition for overwrites\n */\nexport class ImageStorage implements IDisposable {\n  // storage\n  private _images: Map<number, IImageSpec> = new Map();\n  // last used id\n  private _lastId = 0;\n  // last evicted id\n  private _lowestId = 0;\n  // whether a full clear happened before\n  private _fullyCleared = false;\n  // whether render should do a full clear\n  private _needsFullClear = false;\n  // hard limit of stored pixels (fallback limit of 10 MB)\n  private _pixelLimit: number = 2500000;\n\n  private _viewportMetrics: { cols: number, rows: number };\n\n  constructor(\n    private _terminal: ITerminalExt,\n    private _renderer: ImageRenderer,\n    private _opts: IImageAddonOptions\n  ) {\n    try {\n      this.setLimit(this._opts.storageLimit);\n    } catch (e: any) {\n      console.error(e.message);\n      console.warn(`storageLimit is set to ${this.getLimit()} MB`);\n    }\n    this._viewportMetrics = {\n      cols: this._terminal.cols,\n      rows: this._terminal.rows\n    };\n  }\n\n  public dispose(): void {\n    this.reset();\n  }\n\n  public reset(): void {\n    for (const spec of this._images.values()) {\n      spec.marker?.dispose();\n    }\n    this._images.clear();\n    this._renderer.clearAll();\n  }\n\n  public getLimit(): number {\n    return this._pixelLimit * 4 / 1000000;\n  }\n\n  public setLimit(value: number): void {\n    if (value < 1 || value > 1000) {\n      throw RangeError('invalid storageLimit, should be at least 1 MB and not exceed 1G');\n    }\n    this._pixelLimit = (value / 4 * 1000000) >>> 0;\n    this._evictOldest(0);\n  }\n\n  public getUsage(): number {\n    return this._getStoredPixels() * 4 / 1000000;\n  }\n\n  private _getStoredPixels(): number {\n    let storedPixels = 0;\n    for (const spec of this._images.values()) {\n      if (spec.orig) {\n        storedPixels += spec.orig.width * spec.orig.height;\n        if (spec.actual && spec.actual !== spec.orig) {\n          storedPixels += spec.actual.width * spec.actual.height;\n        }\n      }\n    }\n    return storedPixels;\n  }\n\n  /**\n   * Wipe canvas and images on alternate buffer.\n   */\n  public wipeAlternate(): void {\n    // remove all alternate tagged images\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.bufferType === 'alternate') {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._images.delete(id);\n    }\n    // mark canvas to be wiped on next render\n    this._needsFullClear = true;\n    this._fullyCleared = false;\n  }\n\n  /**\n   * Method to add an image to the storage.\n   */\n  public addImage(img: HTMLCanvasElement): void {\n    // never allow storage to exceed memory limit\n    this._evictOldest(img.width * img.height);\n\n    // calc rows x cols needed to display the image\n    let cellSize = this._renderer.cellSize;\n    if (cellSize.width === -1 || cellSize.height === -1) {\n      cellSize = CELL_SIZE_DEFAULT;\n    }\n    const cols = Math.ceil(img.width / cellSize.width);\n    const rows = Math.ceil(img.height / cellSize.height);\n\n    const imageId = ++this._lastId;\n\n    const buffer = this._terminal._core.buffer;\n    const termCols = this._terminal.cols;\n    const termRows = this._terminal.rows;\n    const originX = buffer.x;\n    const originY = buffer.y;\n    let offset = originX;\n    let tileCount = 0;\n\n    if (!this._opts.sixelScrolling) {\n      this._terminal._core._dirtyRowService.markAllDirty();\n      buffer.x = 0;\n      buffer.y = 0;\n      offset = 0;\n    }\n\n    // TODO: how to go with origin mode / scroll margins here?\n    for (let row = 0; row < rows; ++row) {\n      const line = buffer.lines.get(buffer.y + buffer.ybase);\n      for (let col = 0; col < cols; ++col) {\n        if (offset + col >= termCols) break;\n        this._writeToCell(line as IBufferLineExt, offset + col, imageId, row * cols + col);\n        tileCount++;\n      }\n      if (this._opts.sixelScrolling) {\n        if (row < rows - 1) this._terminal._core._inputHandler.lineFeed();\n      } else {\n        if (++buffer.y >= termRows) break;\n      }\n      buffer.x = offset;\n    }\n\n    // cursor positioning modes\n    if (this._opts.sixelScrolling) {\n      buffer.x = offset;\n    } else {\n      buffer.x = originX;\n      buffer.y = originY;\n    }\n\n    // deleted images with zero tile count\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.tileCount < 1) {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._images.delete(id);\n    }\n\n    // eviction marker:\n    // delete the image when the marker gets disposed\n    const endMarker = this._terminal.registerMarker(0);\n    endMarker?.onDispose(() => {\n      const spec = this._images.get(imageId);\n      if (spec) {\n        this._images.delete(imageId);\n      }\n    });\n\n    // since markers do not work on alternate for some reason,\n    // we evict images here manually\n    if (this._terminal.buffer.active.type === 'alternate') {\n      this._evictOnAlternate();\n    }\n\n    // create storage entry\n    const imgSpec: IImageSpec = {\n      orig: img,\n      origCellSize: cellSize,\n      actual: img,\n      actualCellSize: { ...cellSize },  // clone needed, since later modified\n      marker: endMarker || undefined,\n      tileCount,\n      bufferType: this._terminal.buffer.active.type\n    };\n\n    // finally add the image\n    this._images.set(imageId, imgSpec);\n  }\n\n\n  /**\n   * Render method. Collects buffer information and triggers\n   * canvas updates.\n   */\n  // TODO: Should we move this to the ImageRenderer?\n  public render(range: { start: number, end: number }): void {\n    // exit early if we dont have a canvas\n    if (!this._renderer.canvas) {\n      return;\n    }\n    // exit early if we dont have any images to test for\n    if (!this._images.size) {\n      if (!this._fullyCleared) {\n        this._renderer.clearAll();\n        this._fullyCleared = true;\n        this._needsFullClear = false;\n      }\n      return;\n    }\n\n    // buffer switches force a full clear\n    if (this._needsFullClear) {\n      this._renderer.clearAll();\n      this._fullyCleared = true;\n      this._needsFullClear = false;\n    }\n\n    const { start, end } = range;\n    const buffer = this._terminal._core.buffer;\n    const cols = this._terminal._core.cols;\n\n    // clear drawing area\n    this._renderer.clearLines(start, end);\n    // rescale if needed\n    this._renderer.rescaleCanvas();\n\n    // walk all cells in viewport and draw tiles found\n    for (let row = start; row <= end; ++row) {\n      const line = buffer.lines.get(row + buffer.ydisp) as IBufferLineExt;\n      if (!line) return;\n      for (let col = 0; col < cols; ++col) {\n        if (line.getBg(col) & BgFlags.HAS_EXTENDED) {\n          let e: IExtendedAttrsImage = line._extendedAttrs[col] || EMPTY_ATTRS;\n          const imageId = e.imageId;\n          if (imageId === undefined || imageId === -1) {\n            continue;\n          }\n          const imgSpec = this._images.get(imageId);\n          if (e.tileId !== -1) {\n            const startTile = e.tileId;\n            const startCol = col;\n            let count = 1;\n            /**\n             * merge tiles to the right into a single draw call, if:\n             * - not at end of line\n             * - cell has same image id\n             * - cell has consecutive tile id\n             */\n            while (\n              ++col < cols\n              && (line.getBg(col) & BgFlags.HAS_EXTENDED)\n              && (e = line._extendedAttrs[col] || EMPTY_ATTRS)\n              && (e.imageId === imageId)\n              && (e.tileId === startTile + count)\n            ) {\n              count++;\n            }\n            col--;\n            if (imgSpec) {\n              if (imgSpec.actual) {\n                this._renderer.draw(imgSpec, startTile, startCol, row, count);\n              }\n            } else if (this._opts.showPlaceholder) {\n              this._renderer.drawPlaceholder(startCol, row, count);\n            }\n            this._fullyCleared = false;\n          }\n        }\n      }\n    }\n  }\n\n  public viewportResize(metrics: { cols: number, rows: number }): void {\n    // exit early if we have nothing in storage\n    if (!this._images.size) {\n      this._viewportMetrics = metrics;\n      return;\n    }\n\n    // handle only viewport width enlargements, exit all other cases\n    // TODO: needs patch for tile counter\n    if (this._viewportMetrics.cols >= metrics.cols) {\n      this._viewportMetrics = metrics;\n      return;\n    }\n\n    // walk scrollbuffer at old col width to find all possible expansion matches\n    const buffer = this._terminal._core.buffer;\n    const rows = buffer.lines.length;\n    const oldCol = this._viewportMetrics.cols - 1;\n    for (let row = 0; row < rows; ++row) {\n      const line = buffer.lines.get(row) as IBufferLineExt;\n      if (line.getBg(oldCol) & BgFlags.HAS_EXTENDED) {\n        const e: IExtendedAttrsImage = line._extendedAttrs[oldCol] || EMPTY_ATTRS;\n        const imageId = e.imageId;\n        if (imageId === undefined || imageId === -1) {\n          continue;\n        }\n        const imgSpec = this._images.get(imageId);\n        if (!imgSpec) {\n          continue;\n        }\n        // found an image tile at oldCol, check if it qualifies for right exapansion\n        const tilesPerRow = Math.ceil((imgSpec.actual?.width || 0) / imgSpec.actualCellSize.width);\n        if ((e.tileId % tilesPerRow) + 1 >= tilesPerRow) {\n          continue;\n        }\n        // expand only if right side is empty (nothing got wrapped from below)\n        let hasData = false;\n        for (let rightCol = oldCol + 1; rightCol > metrics.cols; ++rightCol) {\n          if (line._data[rightCol * Cell.SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK) {\n            hasData = true;\n            break;\n          }\n        }\n        if (hasData) {\n          continue;\n        }\n        // do right expansion on terminal buffer\n        const end = Math.min(metrics.cols, tilesPerRow - (e.tileId % tilesPerRow) + oldCol);\n        let lastTile = e.tileId;\n        for (let expandCol = oldCol + 1; expandCol < end; ++expandCol) {\n          this._writeToCell(line as IBufferLineExt, expandCol, imageId, ++lastTile);\n          imgSpec.tileCount++;\n        }\n      }\n    }\n    // store new viewport metrics\n    this._viewportMetrics = metrics;\n  }\n\n  /**\n   * Retrieve original canvas at buffer position.\n   */\n  public getImageAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    const buffer = this._terminal._core.buffer;\n    const line = buffer.lines.get(y) as IBufferLineExt;\n    if (line && line.getBg(x) & BgFlags.HAS_EXTENDED) {\n      const e: IExtendedAttrsImage = line._extendedAttrs[x] || EMPTY_ATTRS;\n      if (e.imageId && e.imageId !== -1) {\n        return this._images.get(e.imageId)?.orig;\n      }\n    }\n  }\n\n  /**\n   * Extract active single tile at buffer position.\n   */\n  public extractTileAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    const buffer = this._terminal._core.buffer;\n    const line = buffer.lines.get(y) as IBufferLineExt;\n    if (line && line.getBg(x) & BgFlags.HAS_EXTENDED) {\n      const e: IExtendedAttrsImage = line._extendedAttrs[x] || EMPTY_ATTRS;\n      if (e.imageId && e.imageId !== -1 && e.tileId !== -1) {\n        const spec = this._images.get(e.imageId);\n        if (spec) {\n          return this._renderer.extractTile(spec, e.tileId);\n        }\n      }\n    }\n  }\n\n  // TODO: Do we need some blob offloading tricks here to avoid early eviction?\n  // also see https://stackoverflow.com/questions/28307789/is-there-any-limitation-on-javascript-max-blob-size\n  private _evictOldest(room: number): number {\n    const used = this._getStoredPixels();\n    let current = used;\n    while (this._pixelLimit < current + room && this._images.size) {\n      const spec = this._images.get(++this._lowestId);\n      if (spec && spec.orig) {\n        current -= spec.orig.width * spec.orig.height;\n        if (spec.actual && spec.orig !== spec.actual) {\n          current -= spec.actual.width * spec.actual.height;\n        }\n        spec.marker?.dispose();\n        this._images.delete(this._lowestId);\n      }\n    }\n    return used - current;\n  }\n\n  private _writeToCell(line: IBufferLineExt, x: number, imageId: number, tileId: number): void {\n    if (line._data[x * Cell.SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n      const old = line._extendedAttrs[x];\n      if (old) {\n        if (old.imageId !== undefined) {\n          // found an old ExtendedAttrsImage, since we know that\n          // they are always isolated instances (single cell usage),\n          // we can re-use it and just update their id entries\n          const oldSpec = this._images.get(old.imageId);\n          if (oldSpec) {\n            // early eviction for in-viewport overwrites\n            oldSpec.tileCount--;\n          }\n          old.imageId = imageId;\n          old.tileId = tileId;\n          return;\n        }\n        // found a plain ExtendedAttrs instance, clone it to new entry\n        line._extendedAttrs[x] = new ExtendedAttrsImage(old.ext, old.urlId, imageId, tileId);\n        return;\n      }\n    }\n    // fall-through: always create new ExtendedAttrsImage entry\n    line._data[x * Cell.SIZE + Cell.BG] |= BgFlags.HAS_EXTENDED;\n    line._extendedAttrs[x] = new ExtendedAttrsImage(0, 0, imageId, tileId);\n  }\n\n  private _evictOnAlternate(): void {\n    // nullify tile count of all images on alternate buffer\n    for (const spec of this._images.values()) {\n      if (spec.bufferType === 'alternate') {\n        spec.tileCount = 0;\n      }\n    }\n    // re-count tiles on whole buffer\n    const buffer = this._terminal._core.buffer;\n    for (let y = 0; y < this._terminal.rows; ++y) {\n      const line = buffer.lines.get(y) as IBufferLineExt;\n      if (!line) {\n        continue;\n      }\n      for (let x = 0; x < this._terminal.cols; ++x) {\n        if (line._data[x * Cell.SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          const imgId = line._extendedAttrs[x]?.imageId;\n          if (imgId) {\n            const spec = this._images.get(imgId);\n            if (spec) {\n              spec.tileCount++;\n            }\n          }\n        }\n      }\n    }\n    // deleted images with zero tile count\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.bufferType === 'alternate' && !spec.tileCount) {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._images.delete(id);\n    }\n  }\n}\n","/**\n * Copyright (c) 2020 Joerg Breitbart.\n * @license MIT\n */\n\nimport { ImageStorage } from './ImageStorage';\nimport { IDcsHandler, IParams, IImageAddonOptions, ITerminalExt, AttributeData, IColorManager, IResetHandler } from './Types';\nimport { toRGBA8888, BIG_ENDIAN } from 'sixel/lib/Colors';\nimport { RGBA8888 } from 'sixel/lib/Types';\nimport { WorkerManager } from './WorkerManager';\nimport { ImageRenderer } from './ImageRenderer';\n\n\nexport class SixelHandler implements IDcsHandler, IResetHandler {\n  private _size = 0;\n  private _fillColor = 0;\n  private _aborted = false;\n\n  constructor(\n    private readonly _opts: IImageAddonOptions,\n    private readonly _storage: ImageStorage,\n    private readonly _coreTerminal: ITerminalExt,\n    private readonly _workerManager: WorkerManager\n  ) {}\n\n  public reset(): void {\n    // TODO: reset the sixel decoder to defaults\n    // (only local version, as worker gets reloaded already)\n    console.log('SixelHandler.reset...');\n  }\n\n  // called on new SIXEL DCS sequence\n  public hook(params: IParams): void {\n    // NOOP fall-through for all actions if worker is in non-working condition\n    this._aborted = this._workerManager.failed;\n    if (this._aborted) {\n      return;\n    }\n    this._fillColor = params.params[1] === 1 ? 0 : extractActiveBg(\n      this._coreTerminal._core._inputHandler._curAttrData,\n      this._coreTerminal._core._colorManager.colors);\n    this._size = 0;\n    this._workerManager.sixelInit(this._fillColor, this._opts.sixelPaletteLimit);\n  }\n\n  // called for any SIXEL data chunk\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._aborted || this._workerManager.failed) {\n      return;\n    }\n    if (this._workerManager.sizeExceeded) {\n      this._workerManager.sixelEnd(false);\n      this._aborted = true;\n      return;\n    }\n    this._size += end - start;\n    if (this._size > this._opts.sixelSizeLimit) {\n      console.warn(`SIXEL: too much data, aborting`);\n      this._workerManager.sixelEnd(false);\n      this._aborted = true;\n      return;\n    }\n    /**\n     * copy data over to worker:\n     * - narrow data from uint32 to uint8 (high codepoints are not valid for SIXELs)\n     * - push multiple buffer chunks until all data got written\n     *\n     * We cannot limit data flow at the PUT stage as async pausing is\n     * only implemented for UNHOOK in the parser. To avoid OOM from message flooding\n     * we have `sixelSizeLimit` above in place.\n     */\n    let p = start;\n    while (p < end) {\n      const chunk = new Uint8Array(this._workerManager.getChunk());\n      const length = Math.min(end - p, chunk.length);\n      chunk.set(data.subarray(p, p += length));\n      this._workerManager.sixelPut(chunk, length);\n    }\n  }\n\n  /**\n   * Called on finalizing the SIXEL DCS sequence.\n   * Some notes on control flow and return values:\n   * - worker is in non-working condition: NOOP with sync return\n   * - `sixelSizeLimit` exceeded: NOOP with sync return\n   * - `sixelEnd(false)`: NOOP with sync return\n   * - `sixelEnd(true)`:\n   *    async path waiting for `Promise<ISixelImage | null>`\n   *    from worker depending on decoding success,\n   *    a valid image definition will be added\n   *    to the terminal before finally returning\n   */\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    if (this._aborted || this._workerManager.failed) {\n      return true;\n    }\n    const imgPromise = this._workerManager.sixelEnd(success);\n    if (!imgPromise) {\n      return true;\n    }\n\n    return imgPromise.then(data => {\n      if (!data) {\n        return true;\n      }\n      const canvas = ImageRenderer.createCanvas(\n        this._coreTerminal._core._coreBrowserService.window,\n        data.width,\n        data.height\n      );\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        const imageData = ImageRenderer.createImageData(ctx, data.width, data.height, data.buffer);\n        ctx.putImageData(imageData, 0, 0);  // still taking pretty long for big images\n        this._storage.addImage(canvas);\n      }\n      this._workerManager.sixelSendBuffer(data.buffer);\n      return true;\n    });\n  }\n}\n\n\n/**\n * Some helpers to extract current terminal colors.\n */\n\n// get currently active background color from terminal\n// also respect INVERSE setting\nfunction extractActiveBg(attr: AttributeData, colors: IColorManager['colors']): RGBA8888 {\n  let bg = 0;\n  if (attr.isInverse()) {\n    if (attr.isFgDefault()) {\n      bg = convertLe(colors.foreground.rgba);\n    } else if (attr.isFgRGB()) {\n      const t = (attr.constructor as typeof AttributeData).toColorRGB(attr.getFgColor());\n      bg = toRGBA8888(...t);\n    } else {\n      bg = convertLe(colors.ansi[attr.getFgColor()].rgba);\n    }\n  } else {\n    if (attr.isBgDefault()) {\n      bg = convertLe(colors.background.rgba);\n    } else if (attr.isBgRGB()) {\n      const t = (attr.constructor as typeof AttributeData).toColorRGB(attr.getBgColor());\n      bg = toRGBA8888(...t);\n    } else {\n      bg = convertLe(colors.ansi[attr.getBgColor()].rgba);\n    }\n  }\n  return bg;\n}\n\n// rgba values on the color managers are always in BE, thus convert to LE\nfunction convertLe(color: number): RGBA8888 {\n  if (BIG_ENDIAN) return color;\n  return (color & 0xFF) << 24 | (color >>> 8 & 0xFF) << 16 | (color >>> 16 & 0xFF) << 8 | color >>> 24 & 0xFF;\n}\n","/**\n * Copyright (c) 2021 Joerg Breitbart.\n * @license MIT\n */\n\nimport { IImageAddonOptions } from './Types';\nimport { IDisposable } from 'xterm';\nimport { IImageWorkerMessage, IImagePixel, IImageWorker, MessageType, AckPayload } from './WorkerTypes';\n\n\n\n// pool cleanup interval in ms\nconst CLEANUP_INTERVAL = 20000;\n\n\n/**\n * Manager to encapsulate certain worker aspects:\n * - lazy worker loading\n * - low level communication protocol with worker\n * - promise based image dispatcher\n * - mem pooling\n */\nexport class WorkerManager implements IDisposable {\n  private _worker: IImageWorker | undefined;\n  private _memPool: ArrayBuffer[] = [];\n  private _sixelResolver: ((img: IImagePixel | null) => void) | undefined;\n  private _failedToLoad = false;\n  private _poolCheckerInterval: number | undefined;\n  private _lastActive = 0;\n  public sizeExceeded = false;\n\n  constructor(\n    public url: string,\n    private _opts: IImageAddonOptions,\n    public chunkSize: number = 65536 * 2,\n    public maxPoolSize: number = 50\n  ) {}\n\n  private _startupError: () => void = () => {\n    console.warn('ImageAddon worker failed to load, image output is disabled.');\n    this._failedToLoad = true;\n    this.dispose();\n  };\n\n  private _message: (msg: MessageEvent<IImageWorkerMessage>) => void = event => {\n    const data = event.data;\n    switch (data.type) {\n      case MessageType.CHUNK_TRANSFER:\n        this.storeChunk(data.payload);\n        break;\n      case MessageType.SIXEL_IMAGE:\n        if (this._sixelResolver) {\n          this._sixelResolver(data.payload);\n          this._sixelResolver = undefined;\n        }\n        break;\n      case MessageType.ACK:\n        this._worker?.removeEventListener('error', this._startupError);\n        break;\n      case MessageType.SIZE_EXCEEDED:\n        this.sizeExceeded = true;\n        break;\n    }\n  };\n\n  private _setSixelResolver(resolver?: (img: IImagePixel | null) => void): void {\n    if (this._sixelResolver) {\n      this._sixelResolver(null);\n    }\n    this._sixelResolver = resolver;\n  }\n\n  public dispose(): void {\n    this._worker?.terminate();\n    this._worker = undefined;\n    this._setSixelResolver();\n    this.flushPool();\n    if (this._poolCheckerInterval) {\n      clearInterval(this._poolCheckerInterval);\n      this._poolCheckerInterval = undefined;\n    }\n  }\n\n  public reset(): void {\n    if (this._worker) {\n      this._worker.terminate();\n    }\n    this._worker = undefined;\n    this._failedToLoad = false;\n  }\n\n  public get failed(): boolean {\n    return this._failedToLoad;\n  }\n\n  public get worker(): IImageWorker | undefined {\n    if (!this._worker && !this._failedToLoad) {\n      this._worker = new Worker(this.url);\n      this._worker.addEventListener('message', this._message, false);\n      this._worker.addEventListener('error', this._startupError, false);\n      this._worker.postMessage({\n        type: MessageType.ACK,\n        payload: AckPayload.PING,\n        options: { pixelLimit: this._opts.pixelLimit }\n      });\n    }\n    return this._worker;\n  }\n\n  public getChunk(): ArrayBuffer {\n    this._lastActive = Date.now();\n    return this._memPool.pop() || new ArrayBuffer(this.chunkSize);\n  }\n\n  public storeChunk(chunk: ArrayBuffer): void {\n    if (!this._poolCheckerInterval) {\n      this._poolCheckerInterval = setInterval(() => {\n        if (Date.now() - this._lastActive > CLEANUP_INTERVAL) {\n          this.flushPool();\n          clearInterval(this._poolCheckerInterval);\n          this._poolCheckerInterval = undefined;\n        }\n      }, CLEANUP_INTERVAL);\n    }\n    if (this._memPool.length < this.maxPoolSize) {\n      this._memPool.push(chunk);\n    }\n  }\n\n  public flushPool(): void {\n    this._memPool.length = 0;\n  }\n\n  // SIXEL message interface\n  public sixelInit(fillColor: number, limit: number): void {\n    this._setSixelResolver();\n    this.sizeExceeded = false;\n    this.worker?.postMessage({\n      type: MessageType.SIXEL_INIT,\n      payload: { fillColor, limit }\n    });\n  }\n  public sixelPut(data: Uint8Array, length: number): void {\n    this.worker?.postMessage({\n      type: MessageType.SIXEL_PUT,\n      payload: {\n        buffer: data.buffer,\n        length\n      }\n    }, [data.buffer]);\n  }\n  public sixelEnd(success: boolean): Promise<IImagePixel|null> | void {\n    let result: Promise<IImagePixel|null> | undefined;\n    if (success && this.worker) {\n      result = new Promise<IImagePixel|null>(resolve => this._setSixelResolver(resolve));\n    }\n    this.worker?.postMessage({ type: MessageType.SIXEL_END, payload: success });\n    return result;\n  }\n  public sixelSendBuffer(buffer: ArrayBuffer): void {\n    this.worker?.postMessage({ type: MessageType.CHUNK_TRANSFER, payload: buffer }, [buffer]);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2020 Joerg Breitbart.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable } from 'xterm';\nimport { ImageRenderer } from './ImageRenderer';\nimport { ImageStorage, CELL_SIZE_DEFAULT } from './ImageStorage';\nimport { SixelHandler } from './SixelHandler';\nimport { ITerminalExt, IImageAddonOptions, IResetHandler } from './Types';\nimport { WorkerManager } from './WorkerManager';\n\n\n// default values of addon ctor options\nconst DEFAULT_OPTIONS: IImageAddonOptions = {\n  enableSizeReports: true,\n  pixelLimit: 16777216, // limit to 4096 * 4096 pixels\n  sixelSupport: true,\n  sixelScrolling: true,\n  sixelPaletteLimit: 256,\n  sixelSizeLimit: 25000000,\n  storageLimit: 128,\n  showPlaceholder: true\n};\n\n// max palette size supported by the sixel lib (compile time setting)\nconst MAX_SIXEL_PALETTE_SIZE = 4096;\n\n// definitions for _xtermGraphicsAttributes sequence\nconst enum GaItem {\n  COLORS = 1,\n  SIXEL_GEO = 2,\n  REGIS_GEO = 3\n}\nconst enum GaAction {\n  READ = 1,\n  SET_DEFAULT = 2,\n  SET = 3,\n  READ_MAX = 4\n}\nconst enum GaStatus {\n  SUCCESS = 0,\n  ITEM_ERROR = 1,\n  ACTION_ERROR = 2,\n  FAILURE = 3\n}\n\n\nexport class ImageAddon implements ITerminalAddon {\n  private _opts: IImageAddonOptions;\n  private _defaultOpts: IImageAddonOptions;\n  private _storage: ImageStorage | undefined;\n  private _renderer: ImageRenderer | undefined;\n  private _disposables: IDisposable[] = [];\n  private _terminal: ITerminalExt | undefined;\n  private _workerManager: WorkerManager;\n  private _handlers: Map<String, IResetHandler> = new Map();\n\n  constructor(workerPath: string, opts: Partial<IImageAddonOptions>) {\n    this._opts = Object.assign({}, DEFAULT_OPTIONS, opts);\n    this._defaultOpts = Object.assign({}, DEFAULT_OPTIONS, opts);\n    this._workerManager = new WorkerManager(workerPath, this._opts);\n    this._disposeLater(this._workerManager);\n  }\n\n  public dispose(): void {\n    for (const obj of this._disposables) {\n      obj.dispose();\n    }\n    this._disposables.length = 0;\n    this._handlers.clear();\n  }\n\n  private _disposeLater(...args: IDisposable[]): void {\n    for (const obj of args) {\n      this._disposables.push(obj);\n    }\n  }\n\n  public activate(terminal: ITerminalExt): void {\n    this._terminal = terminal;\n\n    // internal data structures\n    this._renderer = new ImageRenderer(terminal, this._opts.showPlaceholder);\n    this._storage = new ImageStorage(terminal, this._renderer, this._opts);\n\n    // enable size reports\n    if (this._opts.enableSizeReports) {\n      // const windowOptions = terminal.getOption('windowOptions');\n      // windowOptions.getWinSizePixels = true;\n      // windowOptions.getCellSizePixels = true;\n      // windowOptions.getWinSizeChars = true;\n      // terminal.setOption('windowOptions', windowOptions);\n      const windowOps = terminal.options.windowOptions || {};\n      windowOps.getWinSizePixels = true;\n      windowOps.getCellSizePixels = true;\n      windowOps.getWinSizeChars = true;\n      terminal.options.windowOptions = windowOps;\n    }\n\n    this._disposeLater(\n      this._renderer,\n      this._storage,\n\n      // DECSET/DECRST/DA1/XTSMGRAPHICS handlers\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this._decset(params)),\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this._decrst(params)),\n      terminal.parser.registerCsiHandler({ final: 'c' }, params => this._da1(params)),\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'S' }, params => this._xtermGraphicsAttributes(params)),\n\n      // render hook\n      terminal.onRender(range => this._storage?.render(range)),\n\n      /**\n       * reset handlers covered:\n       * - DECSTR\n       * - RIS\n       * - Terminal.reset()\n       */\n      terminal.parser.registerCsiHandler({ intermediates: '!', final: 'p' }, () => this.reset()),\n      terminal.parser.registerEscHandler({ final: 'c' }, () => this.reset()),\n      terminal._core._inputHandler.onRequestReset(() => this.reset()),\n\n      // wipe canvas and delete alternate images on buffer switch\n      terminal.buffer.onBufferChange(() => this._storage?.wipeAlternate()),\n\n      // extend images to the right on resize\n      terminal.onResize(metrics => this._storage?.viewportResize(metrics))\n    );\n\n    // SIXEL handler\n    if (this._opts.sixelSupport) {\n      const sixelHandler = new SixelHandler(this._opts, this._storage, terminal, this._workerManager);\n      this._handlers.set('sixel', sixelHandler);\n      this._disposeLater(\n        terminal._core._inputHandler._parser.registerDcsHandler({ final: 'q' }, sixelHandler)\n      );\n    }\n  }\n\n  // Note: storageLimit is skipped here to not intoduce a surprising side effect.\n  public reset(): boolean {\n    // reset options customizable by sequences to defaults\n    this._opts.sixelScrolling = this._defaultOpts.sixelScrolling;\n    this._opts.sixelPaletteLimit = this._defaultOpts.sixelPaletteLimit;\n    // also clear image storage\n    this._storage?.reset();\n    // reset worker and protocol handlers\n    this._workerManager.reset();\n    for (const value of this._handlers.values()) {\n      value.reset();\n    }\n    return false;\n  }\n\n  public get storageLimit(): number {\n    return this._storage?.getLimit() || -1;\n  }\n\n  public set storageLimit(limit: number) {\n    this._storage?.setLimit(limit);\n    this._opts.storageLimit = limit;\n  }\n\n  public get storageUsage(): number {\n    if (this._storage) {\n      return this._storage.getUsage();\n    }\n    return -1;\n  }\n\n  public get showPlaceholder(): boolean {\n    return this._opts.showPlaceholder;\n  }\n\n  public set showPlaceholder(value: boolean) {\n    this._opts.showPlaceholder = value;\n    this._renderer?.showPlaceholder(value);\n  }\n\n  public getImageAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    return this._storage?.getImageAtBufferCell(x, y);\n  }\n\n  public extractTileAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    return this._storage?.extractTileAtBufferCell(x, y);\n  }\n\n  private _report(s: string): void {\n    this._terminal?._core.coreService.triggerDataEvent(s);\n  }\n\n  private _decset(params: (number | number[])[]): boolean {\n    for (let i = 0; i < params.length; ++i) {\n      switch (params[i]) {\n        case 80:\n          this._opts.sixelScrolling = false;\n          break;\n      }\n    }\n    return false;\n  }\n\n  private _decrst(params: (number | number[])[]): boolean {\n    for (let i = 0; i < params.length; ++i) {\n      switch (params[i]) {\n        case 80:\n          this._opts.sixelScrolling = true;\n          break;\n      }\n    }\n    return false;\n  }\n\n  // overload DA to return something more appropriate\n  private _da1(params: (number | number[])[]): boolean {\n    if (params[0] > 0) {\n      return true;\n    }\n    // reported features:\n    // 62 - VT220\n    // 4 - SIXEL support\n    // 9 - charsets\n    // 22 - ANSI colors\n    if (this._opts.sixelSupport && !this._workerManager.failed) {\n      this._report(`\\x1b[?62;4;9;22c`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Implementation of xterm's graphics attribute sequence.\n   *\n   * Supported features:\n   * - read/change palette limits (max 4096 by sixel lib)\n   * - read SIXEL canvas geometry (reports current window canvas or\n   *   squared pixelLimit if canvas > pixel limit)\n   *\n   * Everything else is deactivated.\n   */\n  private _xtermGraphicsAttributes(params: (number | number[])[]): boolean {\n    if (params.length < 2) {\n      return true;\n    }\n    if (this._workerManager.failed) {\n      // on worker error report graphics caps as not supported\n      this._report(`\\x1b[?${params[0]};${GaStatus.ITEM_ERROR}S`);\n      return true;\n    }\n    if (params[0] === GaItem.COLORS) {\n      switch (params[1]) {\n        case GaAction.READ:\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          return true;\n        case GaAction.SET_DEFAULT:\n          this._opts.sixelPaletteLimit = this._defaultOpts.sixelPaletteLimit;\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          // also reset default palette colors for now\n          this._workerManager.reset();\n          return true;\n        case GaAction.SET:\n          if (params.length > 2 && !(params[2] instanceof Array) && params[2] <= MAX_SIXEL_PALETTE_SIZE) {\n            this._opts.sixelPaletteLimit = params[2];\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          } else {\n            this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          }\n          return true;\n        case GaAction.READ_MAX:\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${MAX_SIXEL_PALETTE_SIZE}S`);\n          return true;\n        default:\n          this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          return true;\n      }\n    }\n    if (params[0] === GaItem.SIXEL_GEO) {\n      switch (params[1]) {\n        // we only implement read and read_max here\n        case GaAction.READ:\n          let width = this._renderer?.dimensions?.canvasWidth;\n          let height = this._renderer?.dimensions?.canvasHeight;\n          if (!width || !height) {\n            // for some reason we have no working image renderer\n            // --> fallback to default cell size\n            const cellSize = CELL_SIZE_DEFAULT;\n            width = (this._terminal?.cols || 80) * cellSize.width;\n            height = (this._terminal?.rows || 24) * cellSize.height;\n          }\n          if (width * height < this._opts.pixelLimit) {\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${width.toFixed(0)};${height.toFixed(0)}S`);\n          } else {\n            // if we overflow pixelLimit report that squared instead\n            const x = Math.floor(Math.sqrt(this._opts.pixelLimit));\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${x};${x}S`);\n          }\n          return true;\n        case GaAction.READ_MAX:\n          // read_max returns pixelLimit as square area\n          const x = Math.floor(Math.sqrt(this._opts.pixelLimit));\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${x};${x}S`);\n          return true;\n        default:\n          this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          return true;\n      }\n    }\n    // exit with error on ReGIS or any other requests\n    this._report(`\\x1b[?${params[0]};${GaStatus.ITEM_ERROR}S`);\n    return true;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","red","n","green","blue","toRGBA8888","r","g","b","a","clamp","low","high","value","Math","max","min","h2c","t1","t2","c","normalizeRGB","round","Object","defineProperty","DEFAULT_FOREGROUND","DEFAULT_BACKGROUND","PALETTE_ANSI_256","PALETTE_VT340_GREY","PALETTE_VT340_COLOR","normalizeHLS","nearestColorIndex","fromRGBA8888","alpha","BIG_ENDIAN","Uint8Array","Uint32Array","buffer","console","warn","color","palette","Number","MAX_SAFE_INTEGER","idx","i","length","dr","dg","db","d","h","l","s","v","HLStoRGB","p","push","ImageRenderer","constructor","_terminal","_showPlaceholder","this","_oldOpen","_core","open","parent","call","_open","screenElement","_optionsRefresh","optionsService","onOptionChange","option","rescaleCanvas","_renderService","refreshRows","rows","static","base","width","height","canvas","document","createElement","ctx","ImageData","imgData","createImageData","data","set","Uint8ClampedArray","img","createImageBitmap","Promise","resolve","undefined","dispose","_removeLayerFromDom","_oldSetRenderer","setRenderer","_ctx","_placeholderBitmap","close","_placeholder","showPlaceholder","cellSize","_createPlaceHolder","dimensions","actualCellWidth","actualCellHeight","clearLines","start","end","clearRect","canvasWidth","clearAll","draw","imgSpec","tileId","col","row","count","_rescaleImage","actual","cols","ceil","sx","sy","floor","dx","dy","finalWidth","finalHeight","drawImage","extractTile","createCanvas","_coreBrowserService","window","getContext","drawPlaceholder","canvasHeight","spec","currentWidth","currentHeight","actualCellSize","originalWidth","originalHeight","origCellSize","orig","bind","renderer","_insertLayerToDom","classList","add","appendChild","desynchronized","parentNode","removeChild","bWidth","blueprint","d32","black","white","fill","y","shift","offset","x","putImageData","screen","ctx2","then","bitmap","CELL_SIZE_DEFAULT","ExtendedAttrsImage","ext","urlId","imageId","_ext","_urlId","underlineStyle","underlineColor","clone","isEmpty","EMPTY_ATTRS","_renderer","_opts","_images","Map","_lastId","_lowestId","_fullyCleared","_needsFullClear","_pixelLimit","setLimit","storageLimit","e","error","message","getLimit","_viewportMetrics","reset","values","marker","clear","RangeError","_evictOldest","getUsage","_getStoredPixels","storedPixels","wipeAlternate","zero","id","entries","bufferType","delete","addImage","termCols","termRows","originX","originY","tileCount","sixelScrolling","_dirtyRowService","markAllDirty","line","lines","get","ybase","_writeToCell","_inputHandler","lineFeed","endMarker","registerMarker","onDispose","active","type","_evictOnAlternate","render","range","size","ydisp","getBg","_extendedAttrs","startTile","startCol","viewportResize","metrics","oldCol","tilesPerRow","hasData","rightCol","_data","lastTile","expandCol","getImageAtBufferCell","extractTileAtBufferCell","room","used","current","old","oldSpec","imgId","convertLe","_storage","_coreTerminal","_workerManager","_size","_fillColor","_aborted","log","hook","params","failed","attr","colors","bg","isInverse","isFgDefault","foreground","rgba","isFgRGB","t","toColorRGB","getFgColor","ansi","isBgDefault","background","isBgRGB","getBgColor","extractActiveBg","_curAttrData","_colorManager","sixelInit","sixelPaletteLimit","put","sizeExceeded","sixelEnd","sixelSizeLimit","chunk","getChunk","subarray","sixelPut","unhook","success","imgPromise","imageData","sixelSendBuffer","url","chunkSize","maxPoolSize","_memPool","_failedToLoad","_lastActive","_startupError","_message","event","storeChunk","payload","_sixelResolver","_worker","removeEventListener","_setSixelResolver","resolver","terminate","flushPool","_poolCheckerInterval","clearInterval","worker","Worker","addEventListener","postMessage","options","pixelLimit","Date","now","pop","ArrayBuffer","setInterval","fillColor","limit","result","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","DEFAULT_OPTIONS","enableSizeReports","sixelSupport","workerPath","opts","_disposables","_handlers","assign","_defaultOpts","WorkerManager","_disposeLater","obj","args","activate","terminal","ImageStorage","windowOps","windowOptions","getWinSizePixels","getCellSizePixels","getWinSizeChars","parser","registerCsiHandler","prefix","final","_decset","_decrst","_da1","_xtermGraphicsAttributes","onRender","intermediates","registerEscHandler","onRequestReset","onBufferChange","onResize","sixelHandler","SixelHandler","_parser","registerDcsHandler","storageUsage","_report","coreService","triggerDataEvent","Array","toFixed","sqrt"],"sourceRoot":""}