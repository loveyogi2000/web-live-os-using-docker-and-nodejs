{"version":3,"file":"xterm-addon-image-worker.js","mappings":"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","sources":["webpack://xterm-addon-image/webpack/universalModuleDefinition","webpack://xterm-addon-image/./node_modules/sixel/lib/Colors.js","webpack://xterm-addon-image/./node_modules/sixel/lib/Decoder.js","webpack://xterm-addon-image/./node_modules/sixel/lib/wasm.js","webpack://xterm-addon-image/webpack/bootstrap","webpack://xterm-addon-image/./src-worker/main.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","\"use strict\";\n/**\n * Copyright (c) 2019 Joerg Breitbart.\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_FOREGROUND = exports.DEFAULT_BACKGROUND = exports.PALETTE_ANSI_256 = exports.PALETTE_VT340_GREY = exports.PALETTE_VT340_COLOR = exports.normalizeHLS = exports.normalizeRGB = exports.nearestColorIndex = exports.fromRGBA8888 = exports.toRGBA8888 = exports.alpha = exports.blue = exports.green = exports.red = exports.BIG_ENDIAN = void 0;\n// FIXME: cleanup this mess, move things either to decoder/encoder, keep only shared things\n// system endianess\nexports.BIG_ENDIAN = new Uint8Array(new Uint32Array([0xFF000000]).buffer)[0] === 0xFF;\nif (exports.BIG_ENDIAN) {\n    console.warn('BE platform detected. This version of node-sixel works only on LE properly.');\n}\n// channel values\nfunction red(n) {\n    return n & 0xFF;\n}\nexports.red = red;\nfunction green(n) {\n    return (n >>> 8) & 0xFF;\n}\nexports.green = green;\nfunction blue(n) {\n    return (n >>> 16) & 0xFF;\n}\nexports.blue = blue;\nfunction alpha(n) {\n    return (n >>> 24) & 0xFF;\n}\nexports.alpha = alpha;\n/**\n * Convert RGB channels to native color RGBA8888.\n */\nfunction toRGBA8888(r, g, b, a = 255) {\n    return ((a & 0xFF) << 24 | (b & 0xFF) << 16 | (g & 0xFF) << 8 | (r & 0xFF)) >>> 0; // ABGR32\n}\nexports.toRGBA8888 = toRGBA8888;\n/**\n * Convert native color to [r, g, b, a].\n */\nfunction fromRGBA8888(color) {\n    return [color & 0xFF, (color >> 8) & 0xFF, (color >> 16) & 0xFF, color >>> 24];\n}\nexports.fromRGBA8888 = fromRGBA8888;\n/**\n * Get index of nearest color in `palette` for `color`.\n * Uses euclidean distance without any luminescence correction.\n */\nfunction nearestColorIndex(color, palette) {\n    const r = red(color);\n    const g = green(color);\n    const b = blue(color);\n    let min = Number.MAX_SAFE_INTEGER;\n    let idx = -1;\n    // use euclidean distance (manhattan gives very poor results)\n    for (let i = 0; i < palette.length; ++i) {\n        const dr = r - palette[i][0];\n        const dg = g - palette[i][1];\n        const db = b - palette[i][2];\n        const d = dr * dr + dg * dg + db * db;\n        if (!d)\n            return i;\n        if (d < min) {\n            min = d;\n            idx = i;\n        }\n    }\n    return idx;\n}\nexports.nearestColorIndex = nearestColorIndex;\n// color conversions\n// HLS taken from: http://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl\nfunction clamp(low, high, value) {\n    return Math.max(low, Math.min(value, high));\n}\nfunction h2c(t1, t2, c) {\n    if (c < 0)\n        c += 1;\n    if (c > 1)\n        c -= 1;\n    return c * 6 < 1\n        ? t2 + (t1 - t2) * 6 * c\n        : c * 2 < 1\n            ? t1\n            : c * 3 < 2\n                ? t2 + (t1 - t2) * (4 - c * 6)\n                : t2;\n}\nfunction HLStoRGB(h, l, s) {\n    if (!s) {\n        const v = Math.round(l * 255);\n        return toRGBA8888(v, v, v);\n    }\n    const t1 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const t2 = 2 * l - t1;\n    return toRGBA8888(clamp(0, 255, Math.round(h2c(t1, t2, h + 1 / 3) * 255)), clamp(0, 255, Math.round(h2c(t1, t2, h) * 255)), clamp(0, 255, Math.round(h2c(t1, t2, h - 1 / 3) * 255)));\n}\n/**\n * Normalize SIXEL RGB values (percent based, 0-100) to RGBA8888.\n */\nfunction normalizeRGB(r, g, b) {\n    return (0xFF000000 | Math.round(b / 100 * 255) << 16 | Math.round(g / 100 * 255) << 8 | Math.round(r / 100 * 255)) >>> 0; // ABGR32\n}\nexports.normalizeRGB = normalizeRGB;\n/**\n * Normalize SIXEL HLS values to RGBA8888. Applies hue correction of +240°.\n */\nfunction normalizeHLS(h, l, s) {\n    // Note: hue value is turned by 240° in VT340, all values given as fractions\n    return HLStoRGB((h + 240 % 360) / 360, l / 100, s / 100);\n}\nexports.normalizeHLS = normalizeHLS;\n/**\n * default palettes\n */\n// FIXME: move palettes to Decoder.ts\n/**\n * 16 predefined color registers of VT340 (values in %):\n * ```\n *                R   G   B\n * 0  Black       0   0   0\n * 1  Blue        20  20  80\n * 2  Red         80  13  13\n * 3  Green       20  80  20\n * 4  Magenta     80  20  80\n * 5  Cyan        20  80  80\n * 6  Yellow      80  80  20\n * 7  Gray 50%    53  53  53\n * 8  Gray 25%    26  26  26\n * 9  Blue*       33  33  60\n * 10 Red*        60  26  26\n * 11 Green*      33  60  33\n * 12 Magenta*    60  33  60\n * 13 Cyan*       33  60  60\n * 14 Yellow*     60  60  33\n * 15 Gray 75%    80  80  80\n * ```\n * (*) less saturated\n *\n * @see https://vt100.net/docs/vt3xx-gp/chapter2.html#S2.4\n*/\nexports.PALETTE_VT340_COLOR = new Uint32Array([\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(20, 20, 80),\n    normalizeRGB(80, 13, 13),\n    normalizeRGB(20, 80, 20),\n    normalizeRGB(80, 20, 80),\n    normalizeRGB(20, 80, 80),\n    normalizeRGB(80, 80, 20),\n    normalizeRGB(53, 53, 53),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(33, 33, 60),\n    normalizeRGB(60, 26, 26),\n    normalizeRGB(33, 60, 33),\n    normalizeRGB(60, 33, 60),\n    normalizeRGB(33, 60, 60),\n    normalizeRGB(60, 60, 33),\n    normalizeRGB(80, 80, 80)\n]);\n/**\n * 16 predefined monochrome registers of VT340 (values in %):\n * ```\n *              R   G   B\n * 0  Black     0   0   0\n * 1  Gray-2    13  13  13\n * 2  Gray-4    26  26  26\n * 3  Gray-6    40  40  40\n * 4  Gray-1    6   6   6\n * 5  Gray-3    20  20  20\n * 6  Gray-5    33  33  33\n * 7  White 7   46  46  46\n * 8  Black 0   0   0   0\n * 9  Gray-2    13  13  13\n * 10 Gray-4    26  26  26\n * 11 Gray-6    40  40  40\n * 12 Gray-1    6   6   6\n * 13 Gray-3    20  20  20\n * 14 Gray-5    33  33  33\n * 15 White 7   46  46  46\n * ```\n *\n * @see https://vt100.net/docs/vt3xx-gp/chapter2.html#S2.4\n */\nexports.PALETTE_VT340_GREY = new Uint32Array([\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(13, 13, 13),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(40, 40, 40),\n    normalizeRGB(6, 6, 6),\n    normalizeRGB(20, 20, 20),\n    normalizeRGB(33, 33, 33),\n    normalizeRGB(46, 46, 46),\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(13, 13, 13),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(40, 40, 40),\n    normalizeRGB(6, 6, 6),\n    normalizeRGB(20, 20, 20),\n    normalizeRGB(33, 33, 33),\n    normalizeRGB(46, 46, 46)\n]);\n/**\n * 256 predefined ANSI colors.\n *\n * @see https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n */\nexports.PALETTE_ANSI_256 = (() => {\n    // 16 lower colors (taken from xterm)\n    const p = [\n        toRGBA8888(0, 0, 0),\n        toRGBA8888(205, 0, 0),\n        toRGBA8888(0, 205, 0),\n        toRGBA8888(205, 205, 0),\n        toRGBA8888(0, 0, 238),\n        toRGBA8888(205, 0, 205),\n        toRGBA8888(0, 250, 205),\n        toRGBA8888(229, 229, 229),\n        toRGBA8888(127, 127, 127),\n        toRGBA8888(255, 0, 0),\n        toRGBA8888(0, 255, 0),\n        toRGBA8888(255, 255, 0),\n        toRGBA8888(92, 92, 255),\n        toRGBA8888(255, 0, 255),\n        toRGBA8888(0, 255, 255),\n        toRGBA8888(255, 255, 255),\n    ];\n    // colors up to 232\n    const d = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; ++r) {\n        for (let g = 0; g < 6; ++g) {\n            for (let b = 0; b < 6; ++b) {\n                p.push(toRGBA8888(d[r], d[g], d[b]));\n            }\n        }\n    }\n    // grey scale to up 255\n    for (let v = 8; v <= 238; v += 10) {\n        p.push(toRGBA8888(v, v, v));\n    }\n    return new Uint32Array(p);\n})();\n/**\n * Background: Black by default.\n * Foreground: White by default.\n *\n * Background color is used whenever a fill color is needed and not explicitly set.\n * Foreground color is used as default initial sixel color.\n */\nexports.DEFAULT_BACKGROUND = toRGBA8888(0, 0, 0, 255);\nexports.DEFAULT_FOREGROUND = toRGBA8888(255, 255, 255, 255);\n//# sourceMappingURL=Colors.js.map","\"use strict\";\n/**\n * Copyright (c) 2021 Joerg Breitbart.\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeAsync = exports.decode = exports.Decoder = exports.DecoderAsync = void 0;\nconst Colors_1 = require(\"./Colors\");\nconst wasm_1 = require(\"./wasm\");\n/* istanbul ignore next */\nfunction decodeBase64(s) {\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(s, 'base64');\n    }\n    const bytestring = atob(s);\n    const result = new Uint8Array(bytestring.length);\n    for (let i = 0; i < result.length; ++i) {\n        result[i] = bytestring.charCodeAt(i);\n    }\n    return result;\n}\nconst WASM_BYTES = decodeBase64(wasm_1.LIMITS.BYTES);\nlet WASM_MODULE;\n// empty canvas\nconst NULL_CANVAS = new Uint32Array();\n// proxy for lazy binding of decoder methods to wasm env callbacks\nclass CallbackProxy {\n    constructor() {\n        this.bandHandler = (width) => 1;\n        this.modeHandler = (mode) => 1;\n    }\n    handle_band(width) {\n        return this.bandHandler(width);\n    }\n    mode_parsed(mode) {\n        return this.modeHandler(mode);\n    }\n}\n// default decoder options\nconst DEFAULT_OPTIONS = {\n    memoryLimit: 2048 * 65536,\n    sixelColor: Colors_1.DEFAULT_FOREGROUND,\n    fillColor: Colors_1.DEFAULT_BACKGROUND,\n    palette: Colors_1.PALETTE_VT340_COLOR,\n    paletteLimit: wasm_1.LIMITS.PALETTE_SIZE,\n    truncate: true\n};\n/**\n * Create a decoder instance asynchronously.\n * To be used in the browser main thread.\n */\nfunction DecoderAsync(opts) {\n    const cbProxy = new CallbackProxy();\n    const importObj = {\n        env: {\n            handle_band: cbProxy.handle_band.bind(cbProxy),\n            mode_parsed: cbProxy.mode_parsed.bind(cbProxy)\n        }\n    };\n    return WebAssembly.instantiate(WASM_MODULE || WASM_BYTES, importObj)\n        .then((inst) => {\n        WASM_MODULE = WASM_MODULE || inst.module;\n        return new Decoder(opts, inst.instance || inst, cbProxy);\n    });\n}\nexports.DecoderAsync = DecoderAsync;\n/**\n * Decoder - web assembly based sixel stream decoder.\n *\n * Usage pattern:\n *  - call `init` to initialize decoder for new image\n *  - feed data chunks to `decode` or `decodeString`\n *  - grab pixels from `data32`\n *  - optional: call `release` to free memory (e.g. after big images)\n *  - start over with next image by calling `init`\n *\n * Properties:\n *  - max width of 2^14 - 4 pixels (compile time setting in wasm)\n *  - no explicit height limit (only limited by memory)\n *  - max 4096 colors palette (compile time setting in wasm)\n *\n * Explanation operation modes:\n * - M1   Mode chosen for level 1 images (no raster attributes),\n *        or for level 2 images with `truncate=false`.\n * - M2   Mode chosen for level 2 images with `truncate=true` (default).\n *        While this mode is not fully spec conform (decoder not expected to truncate),\n *        it is what spec conform encoders should create (should not excess raster).\n *        This mode has several advantages:\n *        - ~15% faster decoding speed\n *        - image dimensions can be evaluated early without processing the whole data\n *        - faster pixel access in `data32` (precalulated)\n *        - image height is not reported as multiple of 6 pixels\n * - M0   Undecided mode state after `init`.\n * The level of an image is determined during early decoding based on the fact,\n * whether the data contains valid raster attributes before any sixel data.\n * Until then the mode of an image is marked as M0, meaning the real operation mode\n * could not be decided yet.\n */\nclass Decoder {\n    /**\n     * Synchonous ctor. Can be called from nodejs or a webworker context.\n     * For instantiation in the browser main thread use `WasmDecoderAsync` instead.\n     */\n    constructor(opts, _instance, _cbProxy) {\n        this._PIXEL_OFFSET = wasm_1.LIMITS.MAX_WIDTH + 4;\n        this._canvas = NULL_CANVAS;\n        this._bandWidths = [];\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        this._lastOffset = 0;\n        this._currentHeight = 0;\n        this._opts = Object.assign({}, DEFAULT_OPTIONS, opts);\n        if (this._opts.paletteLimit > wasm_1.LIMITS.PALETTE_SIZE) {\n            throw new Error(`DecoderOptions.paletteLimit must not exceed ${wasm_1.LIMITS.PALETTE_SIZE}`);\n        }\n        if (!_instance) {\n            const module = WASM_MODULE || (WASM_MODULE = new WebAssembly.Module(WASM_BYTES));\n            _instance = new WebAssembly.Instance(module, {\n                env: {\n                    handle_band: this._handle_band.bind(this),\n                    mode_parsed: this._initCanvas.bind(this)\n                }\n            });\n        }\n        else {\n            _cbProxy.bandHandler = this._handle_band.bind(this);\n            _cbProxy.modeHandler = this._initCanvas.bind(this);\n        }\n        this._instance = _instance;\n        this._wasm = this._instance.exports;\n        this._chunk = new Uint8Array(this._wasm.memory.buffer, this._wasm.get_chunk_address(), wasm_1.LIMITS.CHUNK_SIZE);\n        this._states = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_state_address(), 12);\n        this._palette = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_palette_address(), wasm_1.LIMITS.PALETTE_SIZE);\n        this._palette.set(this._opts.palette);\n        this._pSrc = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_p0_address());\n        this._wasm.init(Colors_1.DEFAULT_FOREGROUND, 0, this._opts.paletteLimit, 0);\n    }\n    // some readonly parser states for internal usage\n    get _fillColor() { return this._states[0]; }\n    get _truncate() { return this._states[8]; }\n    get _rasterWidth() { return this._states[6]; }\n    get _rasterHeight() { return this._states[7]; }\n    get _width() { return this._states[2] ? this._states[2] - 4 : 0; }\n    get _height() { return this._states[3]; }\n    get _level() { return this._states[9]; }\n    get _mode() { return this._states[10]; }\n    get _paletteLimit() { return this._states[11]; }\n    _initCanvas(mode) {\n        if (mode === 2 /* M2 */) {\n            const pixels = this.width * this.height;\n            if (pixels > this._canvas.length) {\n                if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                    this.release();\n                    throw new Error('image exceeds memory limit');\n                }\n                this._canvas = new Uint32Array(pixels);\n            }\n            this._maxWidth = this._width;\n        }\n        else if (mode === 1 /* M1 */) {\n            if (this._level === 2) {\n                // got raster attributes, use them as initial size hint\n                const pixels = Math.min(this._rasterWidth, wasm_1.LIMITS.MAX_WIDTH) * this._rasterHeight;\n                if (pixels > this._canvas.length) {\n                    if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                        this.release();\n                        throw new Error('image exceeds memory limit');\n                    }\n                    this._canvas = new Uint32Array(pixels);\n                }\n            }\n            else {\n                // else fallback to generic resizing, starting with 256*256 pixels\n                if (this._canvas.length < 65536) {\n                    this._canvas = new Uint32Array(65536);\n                }\n            }\n        }\n        return 0; // 0 - continue, 1 - abort right away\n    }\n    _realloc(offset, additionalPixels) {\n        const pixels = offset + additionalPixels;\n        if (pixels > this._canvas.length) {\n            if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                this.release();\n                throw new Error('image exceeds memory limit');\n            }\n            // extend in 65536 pixel blocks\n            const newCanvas = new Uint32Array(Math.ceil(pixels / 65536) * 65536);\n            newCanvas.set(this._canvas);\n            this._canvas = newCanvas;\n        }\n    }\n    _handle_band(width) {\n        const adv = this._PIXEL_OFFSET;\n        let offset = this._lastOffset;\n        if (this._mode === 2 /* M2 */) {\n            let remaining = this.height - this._currentHeight;\n            let c = 0;\n            while (c < 6 && remaining > 0) {\n                this._canvas.set(this._pSrc.subarray(adv * c, adv * c + width), offset + width * c);\n                c++;\n                remaining--;\n            }\n            this._lastOffset += width * c;\n            this._currentHeight += c;\n        }\n        else if (this._mode === 1 /* M1 */) {\n            this._realloc(offset, width * 6);\n            this._maxWidth = Math.max(this._maxWidth, width);\n            this._minWidth = Math.min(this._minWidth, width);\n            for (let i = 0; i < 6; ++i) {\n                this._canvas.set(this._pSrc.subarray(adv * i, adv * i + width), offset + width * i);\n            }\n            this._bandWidths.push(width);\n            this._lastOffset += width * 6;\n            this._currentHeight += 6;\n        }\n        return 0; // 0 - continue, 1 - abort right away\n    }\n    /**\n     * Width of the image data.\n     * Returns the rasterWidth in level2/truncating mode,\n     * otherwise the max width, that has been seen so far.\n     */\n    get width() {\n        return this._mode !== 1 /* M1 */\n            ? this._width\n            : Math.max(this._maxWidth, this._wasm.current_width());\n    }\n    /**\n     * Height of the image data.\n     * Returns the rasterHeight in level2/truncating mode,\n     * otherwise height touched by sixels.\n     */\n    get height() {\n        return this._mode !== 1 /* M1 */\n            ? this._height\n            : this._wasm.current_width()\n                ? this._bandWidths.length * 6 + this._wasm.current_height()\n                : this._bandWidths.length * 6;\n    }\n    /**\n     * Get active palette colors as RGBA8888[] (borrowed).\n     */\n    get palette() {\n        return this._palette.subarray(0, this._paletteLimit);\n    }\n    /**\n     * Get the memory used by the decoder.\n     *\n     * This is a rough estimate accounting the wasm instance memory\n     * and pixel buffers held on JS side (real value will be slightly\n     * higher due to JS book-keeping).\n     * Note that the decoder does not free ressources on its own,\n     * call `release` to free excess memory.\n     */\n    get memoryUsage() {\n        return this._canvas.byteLength + this._wasm.memory.buffer.byteLength + 8 * this._bandWidths.length;\n    }\n    /**\n     * Get various properties of the decoder and the current image.\n     */\n    get properties() {\n        return {\n            width: this.width,\n            height: this.height,\n            mode: this._mode,\n            level: this._level,\n            truncate: !!this._truncate,\n            paletteLimit: this._paletteLimit,\n            fillColor: this._fillColor,\n            memUsage: this.memoryUsage,\n            rasterAttributes: {\n                numerator: this._states[4],\n                denominator: this._states[5],\n                width: this._rasterWidth,\n                height: this._rasterHeight,\n            }\n        };\n    }\n    /**\n     * Initialize decoder for next image. Must be called before\n     * any calls to `decode` or `decodeString`.\n     */\n    // FIXME: reorder arguments, better palette handling\n    init(fillColor = this._opts.fillColor, palette = this._opts.palette, paletteLimit = this._opts.paletteLimit, truncate = this._opts.truncate) {\n        this._wasm.init(this._opts.sixelColor, fillColor, paletteLimit, truncate ? 1 : 0);\n        if (palette) {\n            this._palette.set(palette.subarray(0, wasm_1.LIMITS.PALETTE_SIZE));\n        }\n        this._bandWidths.length = 0;\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        this._lastOffset = 0;\n        this._currentHeight = 0;\n    }\n    /**\n     * Decode next chunk of data from start to end index (exclusive).\n     * @throws Will throw if the image exceeds the memory limit.\n     */\n    decode(data, start = 0, end = data.length) {\n        let p = start;\n        while (p < end) {\n            const length = Math.min(end - p, wasm_1.LIMITS.CHUNK_SIZE);\n            this._chunk.set(data.subarray(p, p += length));\n            this._wasm.decode(0, length);\n        }\n    }\n    /**\n     * Decode next chunk of string data from start to end index (exclusive).\n     * Note: Decoding from string data is rather slow, use `decode` with byte data instead.\n     * @throws Will throw if the image exceeds the memory limit.\n     */\n    decodeString(data, start = 0, end = data.length) {\n        let p = start;\n        while (p < end) {\n            const length = Math.min(end - p, wasm_1.LIMITS.CHUNK_SIZE);\n            for (let i = 0, j = p; i < length; ++i, ++j) {\n                this._chunk[i] = data.charCodeAt(j);\n            }\n            p += length;\n            this._wasm.decode(0, length);\n        }\n    }\n    /**\n     * Get current pixel data as 32-bit typed array (RGBA8888).\n     * Also peeks into pixel data of the current band, that got not pushed yet.\n     */\n    get data32() {\n        if (this._mode === 0 /* M0 */ || !this.width || !this.height) {\n            return NULL_CANVAS;\n        }\n        // get width of pending band to peek into left-over data\n        const currentWidth = this._wasm.current_width();\n        if (this._mode === 2 /* M2 */) {\n            let remaining = this.height - this._currentHeight;\n            if (remaining > 0) {\n                const adv = this._PIXEL_OFFSET;\n                let offset = this._lastOffset;\n                let c = 0;\n                while (c < 6 && remaining > 0) {\n                    this._canvas.set(this._pSrc.subarray(adv * c, adv * c + currentWidth), offset + currentWidth * c);\n                    c++;\n                    remaining--;\n                }\n                if (remaining) {\n                    this._canvas.fill(this._fillColor, offset + currentWidth * c);\n                }\n            }\n            return this._canvas.subarray(0, this.width * this.height);\n        }\n        if (this._mode === 1 /* M1 */) {\n            if (this._minWidth === this._maxWidth) {\n                let escape = false;\n                if (currentWidth) {\n                    if (currentWidth !== this._minWidth) {\n                        escape = true;\n                    }\n                    else {\n                        const adv = this._PIXEL_OFFSET;\n                        let offset = this._lastOffset;\n                        this._realloc(offset, currentWidth * 6);\n                        for (let i = 0; i < 6; ++i) {\n                            this._canvas.set(this._pSrc.subarray(adv * i, adv * i + currentWidth), offset + currentWidth * i);\n                        }\n                    }\n                }\n                if (!escape) {\n                    return this._canvas.subarray(0, this.width * this.height);\n                }\n            }\n            // worst case: re-align pixels if we have bands with different width\n            // This is somewhat allocation intensive, any way to do that in-place, and just once?\n            const final = new Uint32Array(this.width * this.height);\n            final.fill(this._fillColor);\n            let finalOffset = 0;\n            let start = 0;\n            for (let i = 0; i < this._bandWidths.length; ++i) {\n                const bw = this._bandWidths[i];\n                for (let p = 0; p < 6; ++p) {\n                    final.set(this._canvas.subarray(start, start += bw), finalOffset);\n                    finalOffset += this.width;\n                }\n            }\n            // also handle left-over pixels of the current band\n            if (currentWidth) {\n                const adv = this._PIXEL_OFFSET;\n                // other than finished bands, this runs only up to currentHeight\n                const currentHeight = this._wasm.current_height();\n                for (let i = 0; i < currentHeight; ++i) {\n                    final.set(this._pSrc.subarray(adv * i, adv * i + currentWidth), finalOffset + this.width * i);\n                }\n            }\n            return final;\n        }\n        // fallthrough for all not handled cases\n        return NULL_CANVAS;\n    }\n    /**\n     * Same as `data32`, but returning pixel data as Uint8ClampedArray suitable\n     * for direct usage with `ImageData`.\n     */\n    get data8() {\n        return new Uint8ClampedArray(this.data32.buffer, 0, this.width * this.height * 4);\n    }\n    /**\n     * Release image ressources on JS side held by the decoder.\n     *\n     * The decoder tries to re-use memory ressources of a previous image\n     * to lower allocation and GC pressure. Decoding a single big image\n     * will grow the memory usage of the decoder permanently.\n     * Call `release` to reset the internal buffers and free the memory.\n     * Note that this destroys the image data, call it when done processing\n     * a rather big image, otherwise it is not needed. Use `memoryUsage`\n     * to decide, whether the held memory is still within your limits.\n     * This does not affect the wasm module (operates on static memory).\n     */\n    release() {\n        this._canvas = NULL_CANVAS;\n        this._bandWidths.length = 0;\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        // also nullify parser states in wasm to avoid\n        // width/height reporting potential out-of-bound values\n        this._wasm.init(Colors_1.DEFAULT_FOREGROUND, 0, this._opts.paletteLimit, 0);\n    }\n}\nexports.Decoder = Decoder;\n/**\n * Convenient decoding functions for easier usage.\n *\n * These can be used for casual decoding of sixel images,\n * that dont come in as stream chunks.\n * Note that the functions instantiate a stream decoder for every call,\n * which comes with a performance penalty of ~25%.\n */\n/**\n * Decode function with synchronous wasm loading.\n * Can be used in a web worker or in nodejs. Does not work reliable in normal browser context.\n * @throws Will throw if the image exceeds the memory limit.\n */\nfunction decode(data, opts) {\n    const dec = new Decoder(opts);\n    dec.init();\n    typeof data === 'string' ? dec.decodeString(data) : dec.decode(data);\n    return {\n        width: dec.width,\n        height: dec.height,\n        data32: dec.data32,\n        data8: dec.data8\n    };\n}\nexports.decode = decode;\n/**\n * Decode function with asynchronous wasm loading.\n * Use this version in normal browser context.\n * @throws Will throw if the image exceeds the memory limit.\n */\nasync function decodeAsync(data, opts) {\n    const dec = await DecoderAsync(opts);\n    dec.init();\n    typeof data === 'string' ? dec.decodeString(data) : dec.decode(data);\n    return {\n        width: dec.width,\n        height: dec.height,\n        data32: dec.data32,\n        data8: dec.data8\n    };\n}\nexports.decodeAsync = decodeAsync;\n//# sourceMappingURL=Decoder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LIMITS = void 0;\nexports.LIMITS = {\n    CHUNK_SIZE: 16384,\n    PALETTE_SIZE: 4096,\n    MAX_WIDTH: 16384,\n    BYTES: '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AEHAiwIgADcDAEG4iwIgADcDAEGwiwIgADcDAEGoiwIgADcDAEGgiwIgADcDAEGYiwIgADcDAEGQiwIgADcDAEGIiwIgADcDAEGAiwIgADcDAEH4igIgADcDAEHwigIgADcDAEHoigIgADcDAEHgigIgADcDAEHYigIgADcDAEHQigIgADcDAEHIigIgADcDAEHAigIgADcDAEG4igIgADcDAEGwigIgADcDAEGoigIgADcDAEGgigIgADcDAEGYigIgADcDAEGQigIgADcDAEGIigIgADcDAEGAigIgADcDAEH4iQIgADcDAEHwiQIgADcDAEHoiQIgADcDAEHgiQIgADcDAEHYiQIgADcDAEHQiQIgADcDAEHIiQIgADcDAEHAiQIgADcDAEG4iQIgADcDAEGwiQIgADcDAEGoCCgCACIEQf8AakGAAW0hCAJAIARBgQFIDQBBASEBIAhBAiAIQQJKG0EBayICQQFxIQMgBEGBAk4EQCACQX5xIQIDQCABQQl0IgdBEHJBoIkCakGwiQJBgAT8CgAAIAdBsI0CakGwiQJBgAT8CgAAIAFBAmohASACQQJrIgINAAsLIANFDQAgAUEJdEEQckGgiQJqQbCJAkGABPwKAAALAkAgBEEBSA0AIAhBASAIQQFKGyIDQQFxIQUCQCADQQFrIgdFBEBBACEBDAELIANB/v///wdxIQJBACEBA0AgAUEJdCIGQRByQbCJBmpBsIkCQYAE/AoAACAGQZAEckGwiQZqQbCJAkGABPwKAAAgAUECaiEBIAJBAmsiAg0ACwsgBQRAIAFBCXRBEHJBsIkGakGwiQJBgAT8CgAACyAEQQFIDQAgA0EBcSEFIAcEfyADQf7///8HcSECQQAhAQNAIAFBCXQiBkEQckHAiQpqQbCJAkGABPwKAAAgBkGQBHJBwIkKakGwiQJBgAT8CgAAIAFBAmohASACQQJrIgINAAsgAUEHdEEEcgVBBAshASAFBEAgAUECdEHAiQpqQbCJAkGABPwKAAALIARBAUgNACADQQFxIQUgBwR/IANB/v///wdxIQJBACEBA0AgAUEJdCIGQRByQdCJDmpBsIkCQYAE/AoAACAGQZAEckHQiQ5qQbCJAkGABPwKAAAgAUECaiEBIAJBAmsiAg0ACyABQQd0QQRyBUEECyEBIAUEQCABQQJ0QdCJ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'\n};\n//# sourceMappingURL=wasm.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2021 Joerg Breitbart.\n * @license MIT\n */\n\nimport { AckPayload, IImageWorkerMessage, IPostMessage, MessageType } from '../src/WorkerTypes';\n\nimport { Decoder } from 'sixel/lib/Decoder';\nimport { PALETTE_ANSI_256, PALETTE_VT340_COLOR } from 'sixel/lib/Colors';\n\n\n// narrow types for postMessage to our protocol\ndeclare const postMessage: IPostMessage;\n\n\n// always free decoder ressources after decoding if it exceeds this limit\nconst MEM_PERMA_LIMIT = 4194304; // 1024 pixels * 1024 pixels * 4 channels = 4MB\n\n// custom default palette: VT340 (lower 16 colors) + ANSI256 (up to 256) + zeroed (up to 4096)\nconst DEFAULT_PALETTE = PALETTE_ANSI_256;\nDEFAULT_PALETTE.set(PALETTE_VT340_COLOR);\n\n\nlet imageBuffer: ArrayBuffer | undefined;\nlet sizeExceeded = false;\nlet dec: Decoder;\n\n// setup options loaded from ACK\nlet pixelLimit = 0;\n\n\nfunction messageHandler(event: MessageEvent<IImageWorkerMessage>): void {\n  const data = event.data;\n  switch (data.type) {\n    case MessageType.SIXEL_PUT:\n      if (!sizeExceeded) {\n        dec.decode(new Uint8Array(data.payload.buffer, 0, data.payload.length));\n        if (dec.height * dec.width > pixelLimit) {\n          sizeExceeded = true;\n          dec.release();\n          console.warn('image worker: pixelLimit exceeded, aborting');\n          postMessage({ type: MessageType.SIZE_EXCEEDED });\n        }\n      }\n      postMessage({ type: MessageType.CHUNK_TRANSFER, payload: data.payload.buffer }, [data.payload.buffer]);\n      break;\n    case MessageType.SIXEL_END:\n      const success = data.payload;\n      if (success) {\n        if (!dec || !dec.width || !dec.height || sizeExceeded) {\n          postMessage({ type: MessageType.SIXEL_IMAGE, payload: null });\n        } else {\n          const width = dec.width;\n          const height = dec.height;\n          const bytes = width * height * 4;\n          if (!imageBuffer || imageBuffer.byteLength < bytes) {\n            imageBuffer = new ArrayBuffer(bytes);\n          }\n          new Uint32Array(imageBuffer, 0, width * height).set(dec.data32);\n          postMessage({\n            type: MessageType.SIXEL_IMAGE,\n            payload: {\n              buffer: imageBuffer,\n              width,\n              height\n            }\n          }, [imageBuffer]);\n          imageBuffer = undefined;\n          if (dec.memoryUsage > MEM_PERMA_LIMIT) {\n            dec.release();\n          }\n        }\n      }\n      sizeExceeded = false;\n      break;\n    case MessageType.CHUNK_TRANSFER:\n      if (!imageBuffer) {\n        imageBuffer = data.payload;\n      }\n      break;\n    case MessageType.SIXEL_INIT:\n      sizeExceeded = false;\n      const { fillColor, limit } = data.payload;\n      // palette null - always shared from previous decoding\n      dec.init(fillColor, null, limit);\n      break;\n    case MessageType.ACK:\n      pixelLimit = data.options?.pixelLimit || 0;\n      dec = new Decoder({ memoryLimit: pixelLimit * 4, palette: DEFAULT_PALETTE });\n      postMessage({ type: MessageType.ACK, payload: AckPayload.ALIVE, options: null });\n      break;\n  }\n}\nself.addEventListener('message', messageHandler, false);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","red","n","green","blue","toRGBA8888","r","g","b","clamp","low","high","value","Math","max","min","h2c","t1","t2","c","normalizeRGB","round","Object","defineProperty","DEFAULT_FOREGROUND","DEFAULT_BACKGROUND","PALETTE_ANSI_256","PALETTE_VT340_GREY","PALETTE_VT340_COLOR","normalizeHLS","nearestColorIndex","fromRGBA8888","alpha","BIG_ENDIAN","Uint8Array","Uint32Array","buffer","console","warn","color","palette","Number","MAX_SAFE_INTEGER","idx","length","dr","dg","db","d","h","l","s","v","HLStoRGB","p","push","decodeAsync","decode","Decoder","DecoderAsync","Colors_1","wasm_1","WASM_BYTES","Buffer","from","bytestring","atob","result","charCodeAt","decodeBase64","LIMITS","BYTES","WASM_MODULE","NULL_CANVAS","CallbackProxy","constructor","this","bandHandler","width","modeHandler","mode","handle_band","mode_parsed","DEFAULT_OPTIONS","memoryLimit","sixelColor","fillColor","paletteLimit","PALETTE_SIZE","truncate","opts","cbProxy","importObj","env","bind","WebAssembly","instantiate","then","inst","instance","_instance","_cbProxy","_PIXEL_OFFSET","MAX_WIDTH","_canvas","_bandWidths","_maxWidth","_minWidth","_lastOffset","_currentHeight","_opts","assign","Error","_handle_band","_initCanvas","Module","Instance","_wasm","_chunk","memory","get_chunk_address","CHUNK_SIZE","_states","get_state_address","_palette","get_palette_address","set","_pSrc","get_p0_address","init","_fillColor","_truncate","_rasterWidth","_rasterHeight","_width","_height","_level","_mode","_paletteLimit","pixels","height","release","_realloc","offset","additionalPixels","newCanvas","ceil","adv","remaining","subarray","current_width","current_height","memoryUsage","byteLength","properties","level","memUsage","rasterAttributes","numerator","denominator","data","start","end","decodeString","j","data32","currentWidth","fill","escape","final","finalOffset","bw","currentHeight","data8","Uint8ClampedArray","dec","async","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","DEFAULT_PALETTE","imageBuffer","sizeExceeded","pixelLimit","addEventListener","event","type","payload","postMessage","bytes","ArrayBuffer","limit","options"],"sourceRoot":""}