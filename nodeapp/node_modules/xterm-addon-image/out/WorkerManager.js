"use strict";
/**
 * Copyright (c) 2021 Joerg Breitbart.
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerManager = void 0;
// pool cleanup interval in ms
const CLEANUP_INTERVAL = 20000;
/**
 * Manager to encapsulate certain worker aspects:
 * - lazy worker loading
 * - low level communication protocol with worker
 * - promise based image dispatcher
 * - mem pooling
 */
class WorkerManager {
    constructor(url, _opts, chunkSize = 65536 * 2, maxPoolSize = 50) {
        this.url = url;
        this._opts = _opts;
        this.chunkSize = chunkSize;
        this.maxPoolSize = maxPoolSize;
        this._memPool = [];
        this._failedToLoad = false;
        this._lastActive = 0;
        this.sizeExceeded = false;
        this._startupError = () => {
            console.warn('ImageAddon worker failed to load, image output is disabled.');
            this._failedToLoad = true;
            this.dispose();
        };
        this._message = event => {
            var _a;
            const data = event.data;
            switch (data.type) {
                case 6 /* MessageType.CHUNK_TRANSFER */:
                    this.storeChunk(data.payload);
                    break;
                case 5 /* MessageType.SIXEL_IMAGE */:
                    if (this._sixelResolver) {
                        this._sixelResolver(data.payload);
                        this._sixelResolver = undefined;
                    }
                    break;
                case 1 /* MessageType.ACK */:
                    (_a = this._worker) === null || _a === void 0 ? void 0 : _a.removeEventListener('error', this._startupError);
                    break;
                case 7 /* MessageType.SIZE_EXCEEDED */:
                    this.sizeExceeded = true;
                    break;
            }
        };
    }
    _setSixelResolver(resolver) {
        if (this._sixelResolver) {
            this._sixelResolver(null);
        }
        this._sixelResolver = resolver;
    }
    dispose() {
        var _a;
        (_a = this._worker) === null || _a === void 0 ? void 0 : _a.terminate();
        this._worker = undefined;
        this._setSixelResolver();
        this.flushPool();
        if (this._poolCheckerInterval) {
            clearInterval(this._poolCheckerInterval);
            this._poolCheckerInterval = undefined;
        }
    }
    reset() {
        if (this._worker) {
            this._worker.terminate();
        }
        this._worker = undefined;
        this._failedToLoad = false;
    }
    get failed() {
        return this._failedToLoad;
    }
    get worker() {
        if (!this._worker && !this._failedToLoad) {
            this._worker = new Worker(this.url);
            this._worker.addEventListener('message', this._message, false);
            this._worker.addEventListener('error', this._startupError, false);
            this._worker.postMessage({
                type: 1 /* MessageType.ACK */,
                payload: 0 /* AckPayload.PING */,
                options: { pixelLimit: this._opts.pixelLimit }
            });
        }
        return this._worker;
    }
    getChunk() {
        this._lastActive = Date.now();
        return this._memPool.pop() || new ArrayBuffer(this.chunkSize);
    }
    storeChunk(chunk) {
        if (!this._poolCheckerInterval) {
            this._poolCheckerInterval = setInterval(() => {
                if (Date.now() - this._lastActive > CLEANUP_INTERVAL) {
                    this.flushPool();
                    clearInterval(this._poolCheckerInterval);
                    this._poolCheckerInterval = undefined;
                }
            }, CLEANUP_INTERVAL);
        }
        if (this._memPool.length < this.maxPoolSize) {
            this._memPool.push(chunk);
        }
    }
    flushPool() {
        this._memPool.length = 0;
    }
    // SIXEL message interface
    sixelInit(fillColor, limit) {
        var _a;
        this._setSixelResolver();
        this.sizeExceeded = false;
        (_a = this.worker) === null || _a === void 0 ? void 0 : _a.postMessage({
            type: 2 /* MessageType.SIXEL_INIT */,
            payload: { fillColor, limit }
        });
    }
    sixelPut(data, length) {
        var _a;
        (_a = this.worker) === null || _a === void 0 ? void 0 : _a.postMessage({
            type: 3 /* MessageType.SIXEL_PUT */,
            payload: {
                buffer: data.buffer,
                length
            }
        }, [data.buffer]);
    }
    sixelEnd(success) {
        var _a;
        let result;
        if (success && this.worker) {
            result = new Promise(resolve => this._setSixelResolver(resolve));
        }
        (_a = this.worker) === null || _a === void 0 ? void 0 : _a.postMessage({ type: 4 /* MessageType.SIXEL_END */, payload: success });
        return result;
    }
    sixelSendBuffer(buffer) {
        var _a;
        (_a = this.worker) === null || _a === void 0 ? void 0 : _a.postMessage({ type: 6 /* MessageType.CHUNK_TRANSFER */, payload: buffer }, [buffer]);
    }
}
exports.WorkerManager = WorkerManager;
//# sourceMappingURL=WorkerManager.js.map